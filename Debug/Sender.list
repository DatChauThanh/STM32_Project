
Sender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040c0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080041d0  080041d0  000141d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004230  08004230  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08004230  08004230  00014230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004238  08004238  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004238  08004238  00014238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800423c  0800423c  0001423c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000020  08004260  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08004260  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cd84  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022c9  00000000  00000000  0002ce10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df8  00000000  00000000  0002f0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aba  00000000  00000000  0002fed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001889c  00000000  00000000  00030992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f7f6  00000000  00000000  0004922e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ee99  00000000  00000000  00058a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039f8  00000000  00000000  000e78c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000eb2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000020 	.word	0x20000020
 800012c:	00000000 	.word	0x00000000
 8000130:	080041b8 	.word	0x080041b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000024 	.word	0x20000024
 800014c:	080041b8 	.word	0x080041b8

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295
 8000160:	f04f 30ff 	movne.w	r0, #4294967295
 8000164:	f000 b972 	b.w	800044c <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f000 f806 	bl	8000180 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__udivmoddi4>:
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	9e08      	ldr	r6, [sp, #32]
 8000186:	460d      	mov	r5, r1
 8000188:	4604      	mov	r4, r0
 800018a:	468e      	mov	lr, r1
 800018c:	2b00      	cmp	r3, #0
 800018e:	d14c      	bne.n	800022a <__udivmoddi4+0xaa>
 8000190:	428a      	cmp	r2, r1
 8000192:	4694      	mov	ip, r2
 8000194:	d967      	bls.n	8000266 <__udivmoddi4+0xe6>
 8000196:	fab2 f382 	clz	r3, r2
 800019a:	b153      	cbz	r3, 80001b2 <__udivmoddi4+0x32>
 800019c:	fa02 fc03 	lsl.w	ip, r2, r3
 80001a0:	f1c3 0220 	rsb	r2, r3, #32
 80001a4:	fa01 fe03 	lsl.w	lr, r1, r3
 80001a8:	fa20 f202 	lsr.w	r2, r0, r2
 80001ac:	ea42 0e0e 	orr.w	lr, r2, lr
 80001b0:	409c      	lsls	r4, r3
 80001b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001b6:	fbbe f1f7 	udiv	r1, lr, r7
 80001ba:	fa1f f58c 	uxth.w	r5, ip
 80001be:	fb07 ee11 	mls	lr, r7, r1, lr
 80001c2:	fb01 f005 	mul.w	r0, r1, r5
 80001c6:	0c22      	lsrs	r2, r4, #16
 80001c8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001cc:	4290      	cmp	r0, r2
 80001ce:	d90a      	bls.n	80001e6 <__udivmoddi4+0x66>
 80001d0:	eb1c 0202 	adds.w	r2, ip, r2
 80001d4:	f101 3eff 	add.w	lr, r1, #4294967295
 80001d8:	f080 8119 	bcs.w	800040e <__udivmoddi4+0x28e>
 80001dc:	4290      	cmp	r0, r2
 80001de:	f240 8116 	bls.w	800040e <__udivmoddi4+0x28e>
 80001e2:	3902      	subs	r1, #2
 80001e4:	4462      	add	r2, ip
 80001e6:	1a12      	subs	r2, r2, r0
 80001e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80001ec:	fb07 2210 	mls	r2, r7, r0, r2
 80001f0:	fb00 f505 	mul.w	r5, r0, r5
 80001f4:	b2a4      	uxth	r4, r4
 80001f6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80001fa:	42a5      	cmp	r5, r4
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x94>
 80001fe:	eb1c 0404 	adds.w	r4, ip, r4
 8000202:	f100 32ff 	add.w	r2, r0, #4294967295
 8000206:	f080 8104 	bcs.w	8000412 <__udivmoddi4+0x292>
 800020a:	42a5      	cmp	r5, r4
 800020c:	f240 8101 	bls.w	8000412 <__udivmoddi4+0x292>
 8000210:	4464      	add	r4, ip
 8000212:	3802      	subs	r0, #2
 8000214:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000218:	2100      	movs	r1, #0
 800021a:	1b64      	subs	r4, r4, r5
 800021c:	b11e      	cbz	r6, 8000226 <__udivmoddi4+0xa6>
 800021e:	40dc      	lsrs	r4, r3
 8000220:	2300      	movs	r3, #0
 8000222:	e9c6 4300 	strd	r4, r3, [r6]
 8000226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800022a:	428b      	cmp	r3, r1
 800022c:	d908      	bls.n	8000240 <__udivmoddi4+0xc0>
 800022e:	2e00      	cmp	r6, #0
 8000230:	f000 80ea 	beq.w	8000408 <__udivmoddi4+0x288>
 8000234:	2100      	movs	r1, #0
 8000236:	e9c6 0500 	strd	r0, r5, [r6]
 800023a:	4608      	mov	r0, r1
 800023c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000240:	fab3 f183 	clz	r1, r3
 8000244:	2900      	cmp	r1, #0
 8000246:	d148      	bne.n	80002da <__udivmoddi4+0x15a>
 8000248:	42ab      	cmp	r3, r5
 800024a:	d302      	bcc.n	8000252 <__udivmoddi4+0xd2>
 800024c:	4282      	cmp	r2, r0
 800024e:	f200 80f8 	bhi.w	8000442 <__udivmoddi4+0x2c2>
 8000252:	1a84      	subs	r4, r0, r2
 8000254:	eb65 0203 	sbc.w	r2, r5, r3
 8000258:	2001      	movs	r0, #1
 800025a:	4696      	mov	lr, r2
 800025c:	2e00      	cmp	r6, #0
 800025e:	d0e2      	beq.n	8000226 <__udivmoddi4+0xa6>
 8000260:	e9c6 4e00 	strd	r4, lr, [r6]
 8000264:	e7df      	b.n	8000226 <__udivmoddi4+0xa6>
 8000266:	b902      	cbnz	r2, 800026a <__udivmoddi4+0xea>
 8000268:	deff      	udf	#255	; 0xff
 800026a:	fab2 f382 	clz	r3, r2
 800026e:	2b00      	cmp	r3, #0
 8000270:	f040 808e 	bne.w	8000390 <__udivmoddi4+0x210>
 8000274:	1a88      	subs	r0, r1, r2
 8000276:	2101      	movs	r1, #1
 8000278:	0c17      	lsrs	r7, r2, #16
 800027a:	fa1f fe82 	uxth.w	lr, r2
 800027e:	fbb0 f5f7 	udiv	r5, r0, r7
 8000282:	fb07 0015 	mls	r0, r7, r5, r0
 8000286:	0c22      	lsrs	r2, r4, #16
 8000288:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800028c:	fb0e f005 	mul.w	r0, lr, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d908      	bls.n	80002a6 <__udivmoddi4+0x126>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f105 38ff 	add.w	r8, r5, #4294967295
 800029c:	d202      	bcs.n	80002a4 <__udivmoddi4+0x124>
 800029e:	4290      	cmp	r0, r2
 80002a0:	f200 80cc 	bhi.w	800043c <__udivmoddi4+0x2bc>
 80002a4:	4645      	mov	r5, r8
 80002a6:	1a12      	subs	r2, r2, r0
 80002a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80002ac:	fb07 2210 	mls	r2, r7, r0, r2
 80002b0:	fb0e fe00 	mul.w	lr, lr, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0x150>
 80002be:	eb1c 0404 	adds.w	r4, ip, r4
 80002c2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x14e>
 80002c8:	45a6      	cmp	lr, r4
 80002ca:	f200 80b4 	bhi.w	8000436 <__udivmoddi4+0x2b6>
 80002ce:	4610      	mov	r0, r2
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80002d8:	e7a0      	b.n	800021c <__udivmoddi4+0x9c>
 80002da:	f1c1 0720 	rsb	r7, r1, #32
 80002de:	408b      	lsls	r3, r1
 80002e0:	fa22 fc07 	lsr.w	ip, r2, r7
 80002e4:	ea4c 0c03 	orr.w	ip, ip, r3
 80002e8:	fa25 fa07 	lsr.w	sl, r5, r7
 80002ec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002f0:	fbba f8f9 	udiv	r8, sl, r9
 80002f4:	408d      	lsls	r5, r1
 80002f6:	fa20 f307 	lsr.w	r3, r0, r7
 80002fa:	fb09 aa18 	mls	sl, r9, r8, sl
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	432b      	orrs	r3, r5
 8000304:	fa00 f501 	lsl.w	r5, r0, r1
 8000308:	fb08 f00e 	mul.w	r0, r8, lr
 800030c:	0c1c      	lsrs	r4, r3, #16
 800030e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000312:	42a0      	cmp	r0, r4
 8000314:	fa02 f201 	lsl.w	r2, r2, r1
 8000318:	d90b      	bls.n	8000332 <__udivmoddi4+0x1b2>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000322:	f080 8086 	bcs.w	8000432 <__udivmoddi4+0x2b2>
 8000326:	42a0      	cmp	r0, r4
 8000328:	f240 8083 	bls.w	8000432 <__udivmoddi4+0x2b2>
 800032c:	f1a8 0802 	sub.w	r8, r8, #2
 8000330:	4464      	add	r4, ip
 8000332:	1a24      	subs	r4, r4, r0
 8000334:	b298      	uxth	r0, r3
 8000336:	fbb4 f3f9 	udiv	r3, r4, r9
 800033a:	fb09 4413 	mls	r4, r9, r3, r4
 800033e:	fb03 fe0e 	mul.w	lr, r3, lr
 8000342:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000346:	45a6      	cmp	lr, r4
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x1dc>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000352:	d26a      	bcs.n	800042a <__udivmoddi4+0x2aa>
 8000354:	45a6      	cmp	lr, r4
 8000356:	d968      	bls.n	800042a <__udivmoddi4+0x2aa>
 8000358:	3b02      	subs	r3, #2
 800035a:	4464      	add	r4, ip
 800035c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000360:	fba0 9302 	umull	r9, r3, r0, r2
 8000364:	eba4 040e 	sub.w	r4, r4, lr
 8000368:	429c      	cmp	r4, r3
 800036a:	46c8      	mov	r8, r9
 800036c:	469e      	mov	lr, r3
 800036e:	d354      	bcc.n	800041a <__udivmoddi4+0x29a>
 8000370:	d051      	beq.n	8000416 <__udivmoddi4+0x296>
 8000372:	2e00      	cmp	r6, #0
 8000374:	d067      	beq.n	8000446 <__udivmoddi4+0x2c6>
 8000376:	ebb5 0308 	subs.w	r3, r5, r8
 800037a:	eb64 040e 	sbc.w	r4, r4, lr
 800037e:	40cb      	lsrs	r3, r1
 8000380:	fa04 f707 	lsl.w	r7, r4, r7
 8000384:	431f      	orrs	r7, r3
 8000386:	40cc      	lsrs	r4, r1
 8000388:	e9c6 7400 	strd	r7, r4, [r6]
 800038c:	2100      	movs	r1, #0
 800038e:	e74a      	b.n	8000226 <__udivmoddi4+0xa6>
 8000390:	fa02 fc03 	lsl.w	ip, r2, r3
 8000394:	f1c3 0020 	rsb	r0, r3, #32
 8000398:	40c1      	lsrs	r1, r0
 800039a:	409d      	lsls	r5, r3
 800039c:	fa24 f000 	lsr.w	r0, r4, r0
 80003a0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a4:	4328      	orrs	r0, r5
 80003a6:	fbb1 f5f7 	udiv	r5, r1, r7
 80003aa:	fb07 1115 	mls	r1, r7, r5, r1
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	0c02      	lsrs	r2, r0, #16
 80003b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003b8:	fb05 f10e 	mul.w	r1, r5, lr
 80003bc:	4291      	cmp	r1, r2
 80003be:	fa04 f403 	lsl.w	r4, r4, r3
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x256>
 80003c4:	eb1c 0202 	adds.w	r2, ip, r2
 80003c8:	f105 38ff 	add.w	r8, r5, #4294967295
 80003cc:	d22f      	bcs.n	800042e <__udivmoddi4+0x2ae>
 80003ce:	4291      	cmp	r1, r2
 80003d0:	d92d      	bls.n	800042e <__udivmoddi4+0x2ae>
 80003d2:	3d02      	subs	r5, #2
 80003d4:	4462      	add	r2, ip
 80003d6:	1a52      	subs	r2, r2, r1
 80003d8:	fbb2 f1f7 	udiv	r1, r2, r7
 80003dc:	fb07 2211 	mls	r2, r7, r1, r2
 80003e0:	b280      	uxth	r0, r0
 80003e2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003e6:	fb01 f20e 	mul.w	r2, r1, lr
 80003ea:	4282      	cmp	r2, r0
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x280>
 80003ee:	eb1c 0000 	adds.w	r0, ip, r0
 80003f2:	f101 38ff 	add.w	r8, r1, #4294967295
 80003f6:	d216      	bcs.n	8000426 <__udivmoddi4+0x2a6>
 80003f8:	4282      	cmp	r2, r0
 80003fa:	d914      	bls.n	8000426 <__udivmoddi4+0x2a6>
 80003fc:	3902      	subs	r1, #2
 80003fe:	4460      	add	r0, ip
 8000400:	1a80      	subs	r0, r0, r2
 8000402:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000406:	e73a      	b.n	800027e <__udivmoddi4+0xfe>
 8000408:	4631      	mov	r1, r6
 800040a:	4630      	mov	r0, r6
 800040c:	e70b      	b.n	8000226 <__udivmoddi4+0xa6>
 800040e:	4671      	mov	r1, lr
 8000410:	e6e9      	b.n	80001e6 <__udivmoddi4+0x66>
 8000412:	4610      	mov	r0, r2
 8000414:	e6fe      	b.n	8000214 <__udivmoddi4+0x94>
 8000416:	454d      	cmp	r5, r9
 8000418:	d2ab      	bcs.n	8000372 <__udivmoddi4+0x1f2>
 800041a:	ebb9 0802 	subs.w	r8, r9, r2
 800041e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000422:	3801      	subs	r0, #1
 8000424:	e7a5      	b.n	8000372 <__udivmoddi4+0x1f2>
 8000426:	4641      	mov	r1, r8
 8000428:	e7ea      	b.n	8000400 <__udivmoddi4+0x280>
 800042a:	4603      	mov	r3, r0
 800042c:	e796      	b.n	800035c <__udivmoddi4+0x1dc>
 800042e:	4645      	mov	r5, r8
 8000430:	e7d1      	b.n	80003d6 <__udivmoddi4+0x256>
 8000432:	46d0      	mov	r8, sl
 8000434:	e77d      	b.n	8000332 <__udivmoddi4+0x1b2>
 8000436:	4464      	add	r4, ip
 8000438:	3802      	subs	r0, #2
 800043a:	e749      	b.n	80002d0 <__udivmoddi4+0x150>
 800043c:	3d02      	subs	r5, #2
 800043e:	4462      	add	r2, ip
 8000440:	e731      	b.n	80002a6 <__udivmoddi4+0x126>
 8000442:	4608      	mov	r0, r1
 8000444:	e70a      	b.n	800025c <__udivmoddi4+0xdc>
 8000446:	4631      	mov	r1, r6
 8000448:	e6ed      	b.n	8000226 <__udivmoddi4+0xa6>
 800044a:	bf00      	nop

0800044c <__aeabi_idiv0>:
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop

08000450 <DHT_DelayInit>:
#include "DHT.h"

//************************** Low Level Layer ********************************************************//

static void DHT_DelayInit(DHT_Name* DHT)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
	DELAY_TIM_Init(DHT->Timer);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	685b      	ldr	r3, [r3, #4]
 800045c:	4618      	mov	r0, r3
 800045e:	f000 fdac 	bl	8000fba <DELAY_TIM_Init>
}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}

0800046a <DHT_DelayUs>:
static void DHT_DelayUs(DHT_Name* DHT, uint16_t Time)
{
 800046a:	b580      	push	{r7, lr}
 800046c:	b082      	sub	sp, #8
 800046e:	af00      	add	r7, sp, #0
 8000470:	6078      	str	r0, [r7, #4]
 8000472:	460b      	mov	r3, r1
 8000474:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Us(DHT->Timer, Time);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	887a      	ldrh	r2, [r7, #2]
 800047c:	4611      	mov	r1, r2
 800047e:	4618      	mov	r0, r3
 8000480:	f000 fda6 	bl	8000fd0 <DELAY_TIM_Us>
}
 8000484:	bf00      	nop
 8000486:	3708      	adds	r7, #8
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}

0800048c <DHT_SetPinOut>:

static void DHT_SetPinOut(DHT_Name* DHT)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b086      	sub	sp, #24
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000494:	f107 0308 	add.w	r3, r7, #8
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	605a      	str	r2, [r3, #4]
 800049e:	609a      	str	r2, [r3, #8]
 80004a0:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DHT->Pin;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	885b      	ldrh	r3, [r3, #2]
 80004a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a8:	2301      	movs	r3, #1
 80004aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ac:	2302      	movs	r3, #2
 80004ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DHT->PORT, &GPIO_InitStruct);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	689b      	ldr	r3, [r3, #8]
 80004b4:	f107 0208 	add.w	r2, r7, #8
 80004b8:	4611      	mov	r1, r2
 80004ba:	4618      	mov	r0, r3
 80004bc:	f002 f844 	bl	8002548 <HAL_GPIO_Init>
}
 80004c0:	bf00      	nop
 80004c2:	3718      	adds	r7, #24
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <DHT_SetPinIn>:
static void DHT_SetPinIn(DHT_Name* DHT)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d0:	f107 0308 	add.w	r3, r7, #8
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DHT->Pin;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	885b      	ldrh	r3, [r3, #2]
 80004e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e4:	2300      	movs	r3, #0
 80004e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004e8:	2301      	movs	r3, #1
 80004ea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DHT->PORT, &GPIO_InitStruct);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	f107 0208 	add.w	r2, r7, #8
 80004f4:	4611      	mov	r1, r2
 80004f6:	4618      	mov	r0, r3
 80004f8:	f002 f826 	bl	8002548 <HAL_GPIO_Init>
}
 80004fc:	bf00      	nop
 80004fe:	3718      	adds	r7, #24
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <DHT_WritePin>:
static void DHT_WritePin(DHT_Name* DHT, uint8_t Value)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	460b      	mov	r3, r1
 800050e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(DHT->PORT, DHT->Pin, Value);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	6898      	ldr	r0, [r3, #8]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	885b      	ldrh	r3, [r3, #2]
 8000518:	78fa      	ldrb	r2, [r7, #3]
 800051a:	4619      	mov	r1, r3
 800051c:	f002 f9af 	bl	800287e <HAL_GPIO_WritePin>
}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <DHT_ReadPin>:
static uint8_t DHT_ReadPin(DHT_Name* DHT)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(DHT->PORT, DHT->Pin);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	689a      	ldr	r2, [r3, #8]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	885b      	ldrh	r3, [r3, #2]
 8000538:	4619      	mov	r1, r3
 800053a:	4610      	mov	r0, r2
 800053c:	f002 f988 	bl	8002850 <HAL_GPIO_ReadPin>
 8000540:	4603      	mov	r3, r0
}
 8000542:	4618      	mov	r0, r3
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <DHT_Start>:
//********************************* Middle level Layer ****************************************************//
static uint8_t DHT_Start(DHT_Name* DHT)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	b084      	sub	sp, #16
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
	
	uint8_t Response = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	73fb      	strb	r3, [r7, #15]
	DHT_SetPinOut(DHT);  
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f7ff ff98 	bl	800048c <DHT_SetPinOut>
	DHT_WritePin(DHT, 0);
 800055c:	2100      	movs	r1, #0
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	f7ff ffd0 	bl	8000504 <DHT_WritePin>
	DHT_DelayUs(DHT, 20000);  
 8000564:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	f7ff ff7e 	bl	800046a <DHT_DelayUs>
	DHT_WritePin(DHT, 1);	
 800056e:	2101      	movs	r1, #1
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f7ff ffc7 	bl	8000504 <DHT_WritePin>
	DHT_DelayUs(DHT, 30);
 8000576:	211e      	movs	r1, #30
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f7ff ff76 	bl	800046a <DHT_DelayUs>
	DHT_SetPinIn(DHT);    
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f7ff ffa2 	bl	80004c8 <DHT_SetPinIn>
	DHT_DelayUs(DHT, 40); 
 8000584:	2128      	movs	r1, #40	; 0x28
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f7ff ff6f 	bl	800046a <DHT_DelayUs>
	if (!DHT_ReadPin(DHT))
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f7ff ffcb 	bl	8000528 <DHT_ReadPin>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d10e      	bne.n	80005b6 <DHT_Start+0x6c>
	{
		DHT_DelayUs(DHT, 80); 
 8000598:	2150      	movs	r1, #80	; 0x50
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	f7ff ff65 	bl	800046a <DHT_DelayUs>
		if(DHT_ReadPin(DHT))
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f7ff ffc1 	bl	8000528 <DHT_ReadPin>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d002      	beq.n	80005b2 <DHT_Start+0x68>
		{
			Response = 1;   
 80005ac:	2301      	movs	r3, #1
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	e001      	b.n	80005b6 <DHT_Start+0x6c>
		}
		else Response = 0;  
 80005b2:	2300      	movs	r3, #0
 80005b4:	73fb      	strb	r3, [r7, #15]
	}		
	while(DHT_ReadPin(DHT));
 80005b6:	bf00      	nop
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f7ff ffb5 	bl	8000528 <DHT_ReadPin>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d1f9      	bne.n	80005b8 <DHT_Start+0x6e>

	return Response;
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}

080005ce <DHT_Read>:
static uint8_t DHT_Read(DHT_Name* DHT)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b084      	sub	sp, #16
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
	uint8_t Value = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	73fb      	strb	r3, [r7, #15]
	DHT_SetPinIn(DHT);
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f7ff ff74 	bl	80004c8 <DHT_SetPinIn>
	for(int i = 0; i<8; i++)
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	e035      	b.n	8000652 <DHT_Read+0x84>
	{
		while(!DHT_ReadPin(DHT));
 80005e6:	bf00      	nop
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff ff9d 	bl	8000528 <DHT_ReadPin>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d0f9      	beq.n	80005e8 <DHT_Read+0x1a>
		DHT_DelayUs(DHT, 40);
 80005f4:	2128      	movs	r1, #40	; 0x28
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f7ff ff37 	bl	800046a <DHT_DelayUs>
		if(!DHT_ReadPin(DHT))
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f7ff ff93 	bl	8000528 <DHT_ReadPin>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d10e      	bne.n	8000626 <DHT_Read+0x58>
		{
			Value &= ~(1<<(7-i));	
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	f1c3 0307 	rsb	r3, r3, #7
 800060e:	2201      	movs	r2, #1
 8000610:	fa02 f303 	lsl.w	r3, r2, r3
 8000614:	b25b      	sxtb	r3, r3
 8000616:	43db      	mvns	r3, r3
 8000618:	b25a      	sxtb	r2, r3
 800061a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800061e:	4013      	ands	r3, r2
 8000620:	b25b      	sxtb	r3, r3
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	e00b      	b.n	800063e <DHT_Read+0x70>
		}
		else Value |= 1<<(7-i);
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	f1c3 0307 	rsb	r3, r3, #7
 800062c:	2201      	movs	r2, #1
 800062e:	fa02 f303 	lsl.w	r3, r2, r3
 8000632:	b25a      	sxtb	r2, r3
 8000634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000638:	4313      	orrs	r3, r2
 800063a:	b25b      	sxtb	r3, r3
 800063c:	73fb      	strb	r3, [r7, #15]
		while(DHT_ReadPin(DHT));
 800063e:	bf00      	nop
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f7ff ff71 	bl	8000528 <DHT_ReadPin>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d1f9      	bne.n	8000640 <DHT_Read+0x72>
	for(int i = 0; i<8; i++)
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	3301      	adds	r3, #1
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	2b07      	cmp	r3, #7
 8000656:	ddc6      	ble.n	80005e6 <DHT_Read+0x18>
	}
	return Value;
 8000658:	7bfb      	ldrb	r3, [r7, #15]
}
 800065a:	4618      	mov	r0, r3
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <DHT_Init>:

//************************** High Level Layer ********************************************************//
void DHT_Init(DHT_Name* DHT, uint8_t DHT_Type, TIM_HandleTypeDef* Timer, GPIO_TypeDef* DH_PORT, uint16_t DH_Pin)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	b084      	sub	sp, #16
 8000666:	af00      	add	r7, sp, #0
 8000668:	60f8      	str	r0, [r7, #12]
 800066a:	607a      	str	r2, [r7, #4]
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	460b      	mov	r3, r1
 8000670:	72fb      	strb	r3, [r7, #11]
	if(DHT_Type == DHT11)
 8000672:	7afb      	ldrb	r3, [r7, #11]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d104      	bne.n	8000682 <DHT_Init+0x20>
	{
		DHT->Type = DHT11_STARTTIME;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800067e:	801a      	strh	r2, [r3, #0]
 8000680:	e006      	b.n	8000690 <DHT_Init+0x2e>
	}
	else if(DHT_Type == DHT22)
 8000682:	7afb      	ldrb	r3, [r7, #11]
 8000684:	2b02      	cmp	r3, #2
 8000686:	d103      	bne.n	8000690 <DHT_Init+0x2e>
	{
		DHT->Type = DHT22_STARTTIME;
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	f243 62b0 	movw	r2, #14000	; 0x36b0
 800068e:	801a      	strh	r2, [r3, #0]
	}
	DHT->PORT = DH_PORT;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	683a      	ldr	r2, [r7, #0]
 8000694:	609a      	str	r2, [r3, #8]
	DHT->Pin = DH_Pin;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	8b3a      	ldrh	r2, [r7, #24]
 800069a:	805a      	strh	r2, [r3, #2]
	DHT->Timer = Timer;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	605a      	str	r2, [r3, #4]
	DHT_DelayInit(DHT);
 80006a2:	68f8      	ldr	r0, [r7, #12]
 80006a4:	f7ff fed4 	bl	8000450 <DHT_DelayInit>
}
 80006a8:	bf00      	nop
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <DHT_ReadTempHum>:

uint8_t DHT_ReadTempHum(DHT_Name* DHT)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

	uint8_t Temp1, Temp2, RH1, RH2,SUM = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	73fb      	strb	r3, [r7, #15]
	DHT_Start(DHT);
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff ff44 	bl	800054a <DHT_Start>
	RH1 = DHT_Read(DHT);
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f7ff ff83 	bl	80005ce <DHT_Read>
 80006c8:	4603      	mov	r3, r0
 80006ca:	73bb      	strb	r3, [r7, #14]
	RH2 = DHT_Read(DHT);
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f7ff ff7e 	bl	80005ce <DHT_Read>
 80006d2:	4603      	mov	r3, r0
 80006d4:	737b      	strb	r3, [r7, #13]
	Temp1 = DHT_Read(DHT);
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f7ff ff79 	bl	80005ce <DHT_Read>
 80006dc:	4603      	mov	r3, r0
 80006de:	733b      	strb	r3, [r7, #12]
	Temp2 = DHT_Read(DHT);
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f7ff ff74 	bl	80005ce <DHT_Read>
 80006e6:	4603      	mov	r3, r0
 80006e8:	72fb      	strb	r3, [r7, #11]
	SUM = DHT_Read(DHT);
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f7ff ff6f 	bl	80005ce <DHT_Read>
 80006f0:	4603      	mov	r3, r0
 80006f2:	73fb      	strb	r3, [r7, #15]
	if(SUM == RH1 + RH2 +Temp1+Temp2 )
 80006f4:	7bfa      	ldrb	r2, [r7, #15]
 80006f6:	7bb9      	ldrb	r1, [r7, #14]
 80006f8:	7b7b      	ldrb	r3, [r7, #13]
 80006fa:	4419      	add	r1, r3
 80006fc:	7b3b      	ldrb	r3, [r7, #12]
 80006fe:	4419      	add	r1, r3
 8000700:	7afb      	ldrb	r3, [r7, #11]
 8000702:	440b      	add	r3, r1
 8000704:	429a      	cmp	r2, r3
 8000706:	d10d      	bne.n	8000724 <DHT_ReadTempHum+0x74>
	{
		DHT->Humi1= RH1;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	7bba      	ldrb	r2, [r7, #14]
 800070c:	739a      	strb	r2, [r3, #14]
		DHT->Humi2 = RH2;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	7b7a      	ldrb	r2, [r7, #13]
 8000712:	73da      	strb	r2, [r3, #15]
		DHT->Temp1 = Temp1;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	7b3a      	ldrb	r2, [r7, #12]
 8000718:	731a      	strb	r2, [r3, #12]
		DHT->Temp2 = Temp2;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	7afa      	ldrb	r2, [r7, #11]
 800071e:	735a      	strb	r2, [r3, #13]
		return DHT_OK;
 8000720:	2300      	movs	r3, #0
 8000722:	e000      	b.n	8000726 <DHT_ReadTempHum+0x76>
	}
	return DHT_ERROR;
 8000724:	2301      	movs	r3, #1
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 800072e:	b580      	push	{r7, lr}
 8000730:	b084      	sub	sp, #16
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
 8000736:	460b      	mov	r3, r1
 8000738:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	78fa      	ldrb	r2, [r7, #3]
 8000740:	4611      	mov	r1, r2
 8000742:	4618      	mov	r0, r3
 8000744:	f000 fbd1 	bl	8000eea <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4618      	mov	r0, r3
 800074e:	f000 fbec 	bl	8000f2a <SX1278_hw_SPIReadByte>
 8000752:	4603      	mov	r3, r0
 8000754:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2101      	movs	r1, #1
 800075c:	4618      	mov	r0, r3
 800075e:	f000 fb89 	bl	8000e74 <SX1278_hw_SetNSS>
	return tmp;
 8000762:	7bfb      	ldrb	r3, [r7, #15]
}
 8000764:	4618      	mov	r0, r3
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	70fb      	strb	r3, [r7, #3]
 8000778:	4613      	mov	r3, r2
 800077a:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f000 fb76 	bl	8000e74 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	78fb      	ldrb	r3, [r7, #3]
 800078e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000792:	b2db      	uxtb	r3, r3
 8000794:	4619      	mov	r1, r3
 8000796:	4610      	mov	r0, r2
 8000798:	f000 fba7 	bl	8000eea <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	78ba      	ldrb	r2, [r7, #2]
 80007a2:	4611      	mov	r1, r2
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 fba0 	bl	8000eea <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2101      	movs	r1, #1
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 fb5f 	bl	8000e74 <SX1278_hw_SetNSS>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 80007be:	b590      	push	{r4, r7, lr}
 80007c0:	b087      	sub	sp, #28
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	60f8      	str	r0, [r7, #12]
 80007c6:	607a      	str	r2, [r7, #4]
 80007c8:	461a      	mov	r2, r3
 80007ca:	460b      	mov	r3, r1
 80007cc:	72fb      	strb	r3, [r7, #11]
 80007ce:	4613      	mov	r3, r2
 80007d0:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80007d2:	7abb      	ldrb	r3, [r7, #10]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d927      	bls.n	8000828 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 fb48 	bl	8000e74 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	7afa      	ldrb	r2, [r7, #11]
 80007ea:	4611      	mov	r1, r2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 fb7c 	bl	8000eea <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80007f2:	2300      	movs	r3, #0
 80007f4:	75fb      	strb	r3, [r7, #23]
 80007f6:	e00c      	b.n	8000812 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	6819      	ldr	r1, [r3, #0]
 80007fc:	7dfb      	ldrb	r3, [r7, #23]
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	18d4      	adds	r4, r2, r3
 8000802:	4608      	mov	r0, r1
 8000804:	f000 fb91 	bl	8000f2a <SX1278_hw_SPIReadByte>
 8000808:	4603      	mov	r3, r0
 800080a:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 800080c:	7dfb      	ldrb	r3, [r7, #23]
 800080e:	3301      	adds	r3, #1
 8000810:	75fb      	strb	r3, [r7, #23]
 8000812:	7dfa      	ldrb	r2, [r7, #23]
 8000814:	7abb      	ldrb	r3, [r7, #10]
 8000816:	429a      	cmp	r2, r3
 8000818:	d3ee      	bcc.n	80007f8 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2101      	movs	r1, #1
 8000820:	4618      	mov	r0, r3
 8000822:	f000 fb27 	bl	8000e74 <SX1278_hw_SetNSS>
 8000826:	e000      	b.n	800082a <SX1278_SPIBurstRead+0x6c>
		return;
 8000828:	bf00      	nop
	}
}
 800082a:	371c      	adds	r7, #28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd90      	pop	{r4, r7, pc}

08000830 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	461a      	mov	r2, r3
 800083c:	460b      	mov	r3, r1
 800083e:	72fb      	strb	r3, [r7, #11]
 8000840:	4613      	mov	r3, r2
 8000842:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8000844:	7abb      	ldrb	r3, [r7, #10]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d929      	bls.n	800089e <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f000 fb0f 	bl	8000e74 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	7afb      	ldrb	r3, [r7, #11]
 800085c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000860:	b2db      	uxtb	r3, r3
 8000862:	4619      	mov	r1, r3
 8000864:	4610      	mov	r0, r2
 8000866:	f000 fb40 	bl	8000eea <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800086a:	2300      	movs	r3, #0
 800086c:	75fb      	strb	r3, [r7, #23]
 800086e:	e00b      	b.n	8000888 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	6818      	ldr	r0, [r3, #0]
 8000874:	7dfb      	ldrb	r3, [r7, #23]
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	4413      	add	r3, r2
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	4619      	mov	r1, r3
 800087e:	f000 fb34 	bl	8000eea <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000882:	7dfb      	ldrb	r3, [r7, #23]
 8000884:	3301      	adds	r3, #1
 8000886:	75fb      	strb	r3, [r7, #23]
 8000888:	7dfa      	ldrb	r2, [r7, #23]
 800088a:	7abb      	ldrb	r3, [r7, #10]
 800088c:	429a      	cmp	r2, r3
 800088e:	d3ef      	bcc.n	8000870 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2101      	movs	r1, #1
 8000896:	4618      	mov	r0, r3
 8000898:	f000 faec 	bl	8000e74 <SX1278_hw_SetNSS>
 800089c:	e000      	b.n	80008a0 <SX1278_SPIBurstWrite+0x70>
		return;
 800089e:	bf00      	nop
	}
}
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f000 f90d 	bl	8000ad0 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80008b6:	200f      	movs	r0, #15
 80008b8:	f000 fb5d 	bl	8000f76 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f000 f917 	bl	8000af0 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80008c8:	f04f 0000 	mov.w	r0, #0
 80008cc:	f04f 0100 	mov.w	r1, #0
 80008d0:	04d9      	lsls	r1, r3, #19
 80008d2:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80008d6:	04d0      	lsls	r0, r2, #19
 80008d8:	4a6f      	ldr	r2, [pc, #444]	; (8000a98 <SX1278_config+0x1f0>)
 80008da:	f04f 0300 	mov.w	r3, #0
 80008de:	f7ff fc37 	bl	8000150 <__aeabi_uldivmod>
 80008e2:	4602      	mov	r2, r0
 80008e4:	460b      	mov	r3, r1
 80008e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 80008ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80008ee:	f04f 0200 	mov.w	r2, #0
 80008f2:	f04f 0300 	mov.w	r3, #0
 80008f6:	0c02      	lsrs	r2, r0, #16
 80008f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008fc:	0c0b      	lsrs	r3, r1, #16
 80008fe:	b2d3      	uxtb	r3, r2
 8000900:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8000902:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000906:	f04f 0200 	mov.w	r2, #0
 800090a:	f04f 0300 	mov.w	r3, #0
 800090e:	0a02      	lsrs	r2, r0, #8
 8000910:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000914:	0a0b      	lsrs	r3, r1, #8
 8000916:	b2d3      	uxtb	r3, r2
 8000918:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 800091a:	7c3b      	ldrb	r3, [r7, #16]
 800091c:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 800091e:	f107 020c 	add.w	r2, r7, #12
 8000922:	2303      	movs	r3, #3
 8000924:	2106      	movs	r1, #6
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff ff82 	bl	8000830 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 800092c:	2234      	movs	r2, #52	; 0x34
 800092e:	2139      	movs	r1, #57	; 0x39
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff ff1b 	bl	800076c <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	7c1b      	ldrb	r3, [r3, #16]
 800093a:	461a      	mov	r2, r3
 800093c:	4b57      	ldr	r3, [pc, #348]	; (8000a9c <SX1278_config+0x1f4>)
 800093e:	5c9b      	ldrb	r3, [r3, r2]
 8000940:	461a      	mov	r2, r3
 8000942:	2109      	movs	r1, #9
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f7ff ff11 	bl	800076c <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800094a:	220b      	movs	r2, #11
 800094c:	210b      	movs	r1, #11
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff ff0c 	bl	800076c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8000954:	2223      	movs	r2, #35	; 0x23
 8000956:	210c      	movs	r1, #12
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff ff07 	bl	800076c <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	7c5b      	ldrb	r3, [r3, #17]
 8000962:	461a      	mov	r2, r3
 8000964:	4b4e      	ldr	r3, [pc, #312]	; (8000aa0 <SX1278_config+0x1f8>)
 8000966:	5c9b      	ldrb	r3, [r3, r2]
 8000968:	2b06      	cmp	r3, #6
 800096a:	d147      	bne.n	80009fc <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	7c9b      	ldrb	r3, [r3, #18]
 8000970:	461a      	mov	r2, r3
 8000972:	4b4c      	ldr	r3, [pc, #304]	; (8000aa4 <SX1278_config+0x1fc>)
 8000974:	5c9b      	ldrb	r3, [r3, r2]
 8000976:	011b      	lsls	r3, r3, #4
 8000978:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	7cdb      	ldrb	r3, [r3, #19]
 800097e:	4619      	mov	r1, r3
 8000980:	4b49      	ldr	r3, [pc, #292]	; (8000aa8 <SX1278_config+0x200>)
 8000982:	5c5b      	ldrb	r3, [r3, r1]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	b2db      	uxtb	r3, r3
 8000988:	4413      	add	r3, r2
 800098a:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800098c:	3301      	adds	r3, #1
 800098e:	b2db      	uxtb	r3, r3
 8000990:	461a      	mov	r2, r3
 8000992:	211d      	movs	r1, #29
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff fee9 	bl	800076c <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	7c5b      	ldrb	r3, [r3, #17]
 800099e:	461a      	mov	r2, r3
 80009a0:	4b3f      	ldr	r3, [pc, #252]	; (8000aa0 <SX1278_config+0x1f8>)
 80009a2:	5c9b      	ldrb	r3, [r3, r2]
 80009a4:	011b      	lsls	r3, r3, #4
 80009a6:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	7d1b      	ldrb	r3, [r3, #20]
 80009ac:	4619      	mov	r1, r3
 80009ae:	4b3f      	ldr	r3, [pc, #252]	; (8000aac <SX1278_config+0x204>)
 80009b0:	5c5b      	ldrb	r3, [r3, r1]
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	4413      	add	r3, r2
 80009b8:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80009ba:	3303      	adds	r3, #3
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	461a      	mov	r2, r3
 80009c0:	211e      	movs	r1, #30
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff fed2 	bl	800076c <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 80009c8:	2131      	movs	r1, #49	; 0x31
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f7ff feaf 	bl	800072e <SX1278_SPIRead>
 80009d0:	4603      	mov	r3, r0
 80009d2:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	f023 0307 	bic.w	r3, r3, #7
 80009da:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	f043 0305 	orr.w	r3, r3, #5
 80009e2:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
 80009e6:	461a      	mov	r2, r3
 80009e8:	2131      	movs	r1, #49	; 0x31
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f7ff febe 	bl	800076c <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 80009f0:	220c      	movs	r2, #12
 80009f2:	2137      	movs	r1, #55	; 0x37
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f7ff feb9 	bl	800076c <SX1278_SPIWrite>
 80009fa:	e029      	b.n	8000a50 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	7c9b      	ldrb	r3, [r3, #18]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b28      	ldr	r3, [pc, #160]	; (8000aa4 <SX1278_config+0x1fc>)
 8000a04:	5c9b      	ldrb	r3, [r3, r2]
 8000a06:	011b      	lsls	r3, r3, #4
 8000a08:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	7cdb      	ldrb	r3, [r3, #19]
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <SX1278_config+0x200>)
 8000a12:	5c5b      	ldrb	r3, [r3, r1]
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000a18:	4413      	add	r3, r2
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	211d      	movs	r1, #29
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f7ff fea3 	bl	800076c <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	7c5b      	ldrb	r3, [r3, #17]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <SX1278_config+0x1f8>)
 8000a2e:	5c9b      	ldrb	r3, [r3, r2]
 8000a30:	011b      	lsls	r3, r3, #4
 8000a32:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	7d1b      	ldrb	r3, [r3, #20]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <SX1278_config+0x204>)
 8000a3c:	5c5b      	ldrb	r3, [r3, r1]
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000a42:	4413      	add	r3, r2
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	461a      	mov	r2, r3
 8000a48:	211e      	movs	r1, #30
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff fe8e 	bl	800076c <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8000a50:	2204      	movs	r2, #4
 8000a52:	2126      	movs	r1, #38	; 0x26
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff fe89 	bl	800076c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000a5a:	2208      	movs	r2, #8
 8000a5c:	211f      	movs	r1, #31
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff fe84 	bl	800076c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8000a64:	2200      	movs	r2, #0
 8000a66:	2120      	movs	r1, #32
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff fe7f 	bl	800076c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8000a6e:	2208      	movs	r2, #8
 8000a70:	2121      	movs	r1, #33	; 0x21
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f7ff fe7a 	bl	800076c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2141      	movs	r1, #65	; 0x41
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff fe75 	bl	800076c <SX1278_SPIWrite>
	module->readBytes = 0;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2200      	movs	r2, #0
 8000a86:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1278_standby(module); //Entry standby mode
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f000 f810 	bl	8000ab0 <SX1278_standby>
}
 8000a90:	bf00      	nop
 8000a92:	3718      	adds	r7, #24
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	01e84800 	.word	0x01e84800
 8000a9c:	080041d0 	.word	0x080041d0
 8000aa0:	080041d4 	.word	0x080041d4
 8000aa4:	080041dc 	.word	0x080041dc
 8000aa8:	080041e8 	.word	0x080041e8
 8000aac:	080041ec 	.word	0x080041ec

08000ab0 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8000ab8:	2209      	movs	r2, #9
 8000aba:	2101      	movs	r1, #1
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f7ff fe55 	bl	800076c <SX1278_SPIWrite>
	module->status = STANDBY;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	759a      	strb	r2, [r3, #22]
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8000ad8:	2208      	movs	r2, #8
 8000ada:	2101      	movs	r1, #1
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff fe45 	bl	800076c <SX1278_SPIWrite>
	module->status = SLEEP;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	759a      	strb	r2, [r3, #22]
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000af8:	2288      	movs	r2, #136	; 0x88
 8000afa:	2101      	movs	r1, #1
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff fe35 	bl	800076c <SX1278_SPIWrite>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8000b12:	22ff      	movs	r2, #255	; 0xff
 8000b14:	2112      	movs	r1, #18
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff fe28 	bl	800076c <SX1278_SPIWrite>
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	607a      	str	r2, [r7, #4]
 8000b30:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	7afa      	ldrb	r2, [r7, #11]
 8000b36:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 8000b38:	68f8      	ldr	r0, [r7, #12]
 8000b3a:	f7ff feb5 	bl	80008a8 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8000b3e:	2284      	movs	r2, #132	; 0x84
 8000b40:	214d      	movs	r1, #77	; 0x4d
 8000b42:	68f8      	ldr	r0, [r7, #12]
 8000b44:	f7ff fe12 	bl	800076c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8000b48:	22ff      	movs	r2, #255	; 0xff
 8000b4a:	2124      	movs	r1, #36	; 0x24
 8000b4c:	68f8      	ldr	r0, [r7, #12]
 8000b4e:	f7ff fe0d 	bl	800076c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8000b52:	2201      	movs	r2, #1
 8000b54:	2140      	movs	r1, #64	; 0x40
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	f7ff fe08 	bl	800076c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8000b5c:	223f      	movs	r2, #63	; 0x3f
 8000b5e:	2111      	movs	r1, #17
 8000b60:	68f8      	ldr	r0, [r7, #12]
 8000b62:	f7ff fe03 	bl	800076c <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000b66:	68f8      	ldr	r0, [r7, #12]
 8000b68:	f7ff ffcf 	bl	8000b0a <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8000b6c:	7afb      	ldrb	r3, [r7, #11]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	2122      	movs	r1, #34	; 0x22
 8000b72:	68f8      	ldr	r0, [r7, #12]
 8000b74:	f7ff fdfa 	bl	800076c <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000b78:	210f      	movs	r1, #15
 8000b7a:	68f8      	ldr	r0, [r7, #12]
 8000b7c:	f7ff fdd7 	bl	800072e <SX1278_SPIRead>
 8000b80:	4603      	mov	r3, r0
 8000b82:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8000b84:	7dfb      	ldrb	r3, [r7, #23]
 8000b86:	461a      	mov	r2, r3
 8000b88:	210d      	movs	r1, #13
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f7ff fdee 	bl	800076c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8000b90:	228d      	movs	r2, #141	; 0x8d
 8000b92:	2101      	movs	r1, #1
 8000b94:	68f8      	ldr	r0, [r7, #12]
 8000b96:	f7ff fde9 	bl	800076c <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000ba2:	2118      	movs	r1, #24
 8000ba4:	68f8      	ldr	r0, [r7, #12]
 8000ba6:	f7ff fdc2 	bl	800072e <SX1278_SPIRead>
 8000baa:	4603      	mov	r3, r0
 8000bac:	f003 0304 	and.w	r3, r3, #4
 8000bb0:	2b04      	cmp	r3, #4
 8000bb2:	d104      	bne.n	8000bbe <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	759a      	strb	r2, [r3, #22]
			return 1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e013      	b.n	8000be6 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d109      	bne.n	8000bde <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 f967 	bl	8000ea2 <SX1278_hw_Reset>
			SX1278_config(module);
 8000bd4:	68f8      	ldr	r0, [r7, #12]
 8000bd6:	f7ff fe67 	bl	80008a8 <SX1278_config>
			return 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e003      	b.n	8000be6 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8000bde:	2001      	movs	r0, #1
 8000be0:	f000 f9c9 	bl	8000f76 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000be4:	e7dd      	b.n	8000ba2 <SX1278_LoRaEntryRx+0x7e>
	}
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b084      	sub	sp, #16
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f9c6 	bl	8000f8c <SX1278_hw_GetDIO0>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d030      	beq.n	8000c68 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	3317      	adds	r3, #23
 8000c0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f003 fa97 	bl	8004144 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8000c16:	2110      	movs	r1, #16
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff fd88 	bl	800072e <SX1278_SPIRead>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8000c22:	7bbb      	ldrb	r3, [r7, #14]
 8000c24:	461a      	mov	r2, r3
 8000c26:	210d      	movs	r1, #13
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff fd9f 	bl	800076c <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	7c5b      	ldrb	r3, [r3, #17]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d103      	bne.n	8000c3e <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	7d5b      	ldrb	r3, [r3, #21]
 8000c3a:	73fb      	strb	r3, [r7, #15]
 8000c3c:	e005      	b.n	8000c4a <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8000c3e:	2113      	movs	r1, #19
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff fd74 	bl	800072e <SX1278_SPIRead>
 8000c46:	4603      	mov	r3, r0
 8000c48:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f103 0217 	add.w	r2, r3, #23
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
 8000c52:	2100      	movs	r1, #0
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff fdb2 	bl	80007be <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	7bfa      	ldrb	r2, [r7, #15]
 8000c5e:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
		SX1278_clearLoRaIrq(module);
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff ff51 	bl	8000b0a <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b086      	sub	sp, #24
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	60f8      	str	r0, [r7, #12]
 8000c7e:	460b      	mov	r3, r1
 8000c80:	607a      	str	r2, [r7, #4]
 8000c82:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	7afa      	ldrb	r2, [r7, #11]
 8000c88:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 8000c8a:	68f8      	ldr	r0, [r7, #12]
 8000c8c:	f7ff fe0c 	bl	80008a8 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8000c90:	2287      	movs	r2, #135	; 0x87
 8000c92:	214d      	movs	r1, #77	; 0x4d
 8000c94:	68f8      	ldr	r0, [r7, #12]
 8000c96:	f7ff fd69 	bl	800076c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2124      	movs	r1, #36	; 0x24
 8000c9e:	68f8      	ldr	r0, [r7, #12]
 8000ca0:	f7ff fd64 	bl	800076c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8000ca4:	2241      	movs	r2, #65	; 0x41
 8000ca6:	2140      	movs	r1, #64	; 0x40
 8000ca8:	68f8      	ldr	r0, [r7, #12]
 8000caa:	f7ff fd5f 	bl	800076c <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000cae:	68f8      	ldr	r0, [r7, #12]
 8000cb0:	f7ff ff2b 	bl	8000b0a <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8000cb4:	22f7      	movs	r2, #247	; 0xf7
 8000cb6:	2111      	movs	r1, #17
 8000cb8:	68f8      	ldr	r0, [r7, #12]
 8000cba:	f7ff fd57 	bl	800076c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8000cbe:	7afb      	ldrb	r3, [r7, #11]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	2122      	movs	r1, #34	; 0x22
 8000cc4:	68f8      	ldr	r0, [r7, #12]
 8000cc6:	f7ff fd51 	bl	800076c <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8000cca:	210e      	movs	r1, #14
 8000ccc:	68f8      	ldr	r0, [r7, #12]
 8000cce:	f7ff fd2e 	bl	800072e <SX1278_SPIRead>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8000cd6:	7dfb      	ldrb	r3, [r7, #23]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	210d      	movs	r1, #13
 8000cdc:	68f8      	ldr	r0, [r7, #12]
 8000cde:	f7ff fd45 	bl	800076c <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8000ce2:	2122      	movs	r1, #34	; 0x22
 8000ce4:	68f8      	ldr	r0, [r7, #12]
 8000ce6:	f7ff fd22 	bl	800072e <SX1278_SPIRead>
 8000cea:	4603      	mov	r3, r0
 8000cec:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8000cee:	7dba      	ldrb	r2, [r7, #22]
 8000cf0:	7afb      	ldrb	r3, [r7, #11]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d104      	bne.n	8000d00 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	759a      	strb	r2, [r3, #22]
			return 1;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e00e      	b.n	8000d1e <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1ea      	bne.n	8000ce2 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 f8c6 	bl	8000ea2 <SX1278_hw_Reset>
			SX1278_config(module);
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	f7ff fdc6 	bl	80008a8 <SX1278_config>
			return 0;
 8000d1c:	2300      	movs	r3, #0
		}
	}
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b084      	sub	sp, #16
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	60f8      	str	r0, [r7, #12]
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	4613      	mov	r3, r2
 8000d34:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	68ba      	ldr	r2, [r7, #8]
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	68f8      	ldr	r0, [r7, #12]
 8000d3e:	f7ff fd77 	bl	8000830 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8000d42:	228b      	movs	r2, #139	; 0x8b
 8000d44:	2101      	movs	r1, #1
 8000d46:	68f8      	ldr	r0, [r7, #12]
 8000d48:	f7ff fd10 	bl	800076c <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 f91b 	bl	8000f8c <SX1278_hw_GetDIO0>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d00b      	beq.n	8000d74 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8000d5c:	2112      	movs	r1, #18
 8000d5e:	68f8      	ldr	r0, [r7, #12]
 8000d60:	f7ff fce5 	bl	800072e <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8000d64:	68f8      	ldr	r0, [r7, #12]
 8000d66:	f7ff fed0 	bl	8000b0a <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8000d6a:	68f8      	ldr	r0, [r7, #12]
 8000d6c:	f7ff fea0 	bl	8000ab0 <SX1278_standby>
			return 1;
 8000d70:	2301      	movs	r3, #1
 8000d72:	e013      	b.n	8000d9c <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d109      	bne.n	8000d94 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 f88c 	bl	8000ea2 <SX1278_hw_Reset>
			SX1278_config(module);
 8000d8a:	68f8      	ldr	r0, [r7, #12]
 8000d8c:	f7ff fd8c 	bl	80008a8 <SX1278_config>
			return 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	e003      	b.n	8000d9c <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8000d94:	2001      	movs	r0, #1
 8000d96:	f000 f8ee 	bl	8000f76 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000d9a:	e7d7      	b.n	8000d4c <SX1278_LoRaTxPacket+0x26>
	}
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3710      	adds	r7, #16
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 f848 	bl	8000e4a <SX1278_hw_init>
	module->frequency = frequency;
 8000dba:	68f9      	ldr	r1, [r7, #12]
 8000dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000dc0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	7e3a      	ldrb	r2, [r7, #24]
 8000dc8:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	7f3a      	ldrb	r2, [r7, #28]
 8000dce:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000dd6:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000dde:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000de6:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000dee:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f7ff fd59 	bl	80008a8 <SX1278_config>
}
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b084      	sub	sp, #16
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	60f8      	str	r0, [r7, #12]
 8000e06:	60b9      	str	r1, [r7, #8]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8000e12:	79fa      	ldrb	r2, [r7, #7]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d003      	beq.n	8000e20 <SX1278_read+0x22>
		length = module->readBytes;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8000e1e:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	3317      	adds	r3, #23
 8000e24:	79fa      	ldrb	r2, [r7, #7]
 8000e26:	4619      	mov	r1, r3
 8000e28:	68b8      	ldr	r0, [r7, #8]
 8000e2a:	f003 f9b7 	bl	800419c <memcpy>
	rxBuf[length] = '\0';
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	68ba      	ldr	r2, [r7, #8]
 8000e32:	4413      	add	r3, r2
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	return length;
 8000e40:	79fb      	ldrb	r3, [r7, #7]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <SX1278_hw_init>:
#include "SX1278_hw.h"
#include <string.h>
#include "main.h"


__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000e52:	2101      	movs	r1, #1
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f000 f80d 	bl	8000e74 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6858      	ldr	r0, [r3, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	2201      	movs	r2, #1
 8000e66:	4619      	mov	r1, r3
 8000e68:	f001 fd09 	bl	800287e <HAL_GPIO_WritePin>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6958      	ldr	r0, [r3, #20]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	691b      	ldr	r3, [r3, #16]
 8000e86:	b299      	uxth	r1, r3
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	bf0c      	ite	eq
 8000e8e:	2301      	moveq	r3, #1
 8000e90:	2300      	movne	r3, #0
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	461a      	mov	r2, r3
 8000e96:	f001 fcf2 	bl	800287e <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000eaa:	2101      	movs	r1, #1
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ffe1 	bl	8000e74 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6858      	ldr	r0, [r3, #4]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f001 fcdd 	bl	800287e <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f000 f856 	bl	8000f76 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6858      	ldr	r0, [r3, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f001 fcd1 	bl	800287e <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8000edc:	2064      	movs	r0, #100	; 0x64
 8000ede:	f000 f84a 	bl	8000f76 <SX1278_hw_DelayMs>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff ffbb 	bl	8000e74 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6998      	ldr	r0, [r3, #24]
 8000f02:	1cf9      	adds	r1, r7, #3
 8000f04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f002 fabd 	bl	8003488 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000f0e:	bf00      	nop
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f002 fdaa 	bl	8003a6e <HAL_SPI_GetState>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d1f7      	bne.n	8000f10 <SX1278_hw_SPICommand+0x26>
		;
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af02      	add	r7, sp, #8
 8000f30:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000f32:	2300      	movs	r3, #0
 8000f34:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000f36:	2300      	movs	r3, #0
 8000f38:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ff99 	bl	8000e74 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6998      	ldr	r0, [r3, #24]
 8000f46:	f107 020e 	add.w	r2, r7, #14
 8000f4a:	f107 010f 	add.w	r1, r7, #15
 8000f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	2301      	movs	r3, #1
 8000f56:	f002 fbda 	bl	800370e <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000f5a:	bf00      	nop
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f002 fd84 	bl	8003a6e <HAL_SPI_GetState>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d1f7      	bne.n	8000f5c <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8000f6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f000 fd82 	bl	8001a88 <HAL_Delay>
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4610      	mov	r0, r2
 8000fa2:	f001 fc55 	bl	8002850 <HAL_GPIO_ReadPin>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	bf0c      	ite	eq
 8000fac:	2301      	moveq	r3, #1
 8000fae:	2300      	movne	r3, #0
 8000fb0:	b2db      	uxtb	r3, r3
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <DELAY_TIM_Init>:
- Su dung thu vien hal

*****************************************************************************************************/
#include "delay_timer.h"
void DELAY_TIM_Init(TIM_HandleTypeDef *htim)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f002 fe56 	bl	8003c74 <HAL_TIM_Base_Start>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <DELAY_TIM_Us>:

void DELAY_TIM_Us(TIM_HandleTypeDef *htim, uint16_t time)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(htim)<time){}
 8000fe4:	bf00      	nop
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fec:	887b      	ldrh	r3, [r7, #2]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d3f9      	bcc.n	8000fe6 <DELAY_TIM_Us+0x16>
}
 8000ff2:	bf00      	nop
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
	...

08001000 <ADC_Select_CH0>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ADC_Select_CH0 (void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_0;
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8001014:	2301      	movs	r3, #1
 8001016:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	4619      	mov	r1, r3
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <ADC_Select_CH0+0x38>)
 8001022:	f001 f819 	bl	8002058 <HAL_ADC_ConfigChannel>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <ADC_Select_CH0+0x30>
	  {
	    Error_Handler();
 800102c:	f000 fb86 	bl	800173c <Error_Handler>
	  }
}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	2000003c 	.word	0x2000003c

0800103c <ADC_Select_CH1>:

void ADC_Select_CH1 (void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 800104c:	2301      	movs	r3, #1
 800104e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8001050:	2301      	movs	r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	; (8001074 <ADC_Select_CH1+0x38>)
 800105e:	f000 fffb 	bl	8002058 <HAL_ADC_ConfigChannel>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <ADC_Select_CH1+0x30>
	  {
	    Error_Handler();
 8001068:	f000 fb68 	bl	800173c <Error_Handler>
	  }
}
 800106c:	bf00      	nop
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	2000003c 	.word	0x2000003c

08001078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107e:	f000 fca1 	bl	80019c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001082:	f000 f943 	bl	800130c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001086:	f000 fabf 	bl	8001608 <MX_GPIO_Init>
  MX_TIM1_Init();
 800108a:	f000 fa1f 	bl	80014cc <MX_TIM1_Init>
  MX_SPI1_Init();
 800108e:	f000 f9e7 	bl	8001460 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001092:	f000 f997 	bl	80013c4 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001096:	f000 fa69 	bl	800156c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800109a:	488d      	ldr	r0, [pc, #564]	; (80012d0 <main+0x258>)
 800109c:	f002 fdea 	bl	8003c74 <HAL_TIM_Base_Start>

  DHT_Init(&dht11, DHT11, &htim4, DHT_GPIO_Port, DHT_Pin);
 80010a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	4b8b      	ldr	r3, [pc, #556]	; (80012d4 <main+0x25c>)
 80010a8:	4a8b      	ldr	r2, [pc, #556]	; (80012d8 <main+0x260>)
 80010aa:	2101      	movs	r1, #1
 80010ac:	488b      	ldr	r0, [pc, #556]	; (80012dc <main+0x264>)
 80010ae:	f7ff fad8 	bl	8000662 <DHT_Init>


  //initialize LoRa module
   SX1278_hw.dio0.port = DIO0_GPIO_Port;
 80010b2:	4b8b      	ldr	r3, [pc, #556]	; (80012e0 <main+0x268>)
 80010b4:	4a8b      	ldr	r2, [pc, #556]	; (80012e4 <main+0x26c>)
 80010b6:	60da      	str	r2, [r3, #12]
   SX1278_hw.dio0.pin = DIO0_Pin;
 80010b8:	4b89      	ldr	r3, [pc, #548]	; (80012e0 <main+0x268>)
 80010ba:	2202      	movs	r2, #2
 80010bc:	609a      	str	r2, [r3, #8]
   SX1278_hw.nss.port = NSS_GPIO_Port;
 80010be:	4b88      	ldr	r3, [pc, #544]	; (80012e0 <main+0x268>)
 80010c0:	4a84      	ldr	r2, [pc, #528]	; (80012d4 <main+0x25c>)
 80010c2:	615a      	str	r2, [r3, #20]
   SX1278_hw.nss.pin = NSS_Pin;
 80010c4:	4b86      	ldr	r3, [pc, #536]	; (80012e0 <main+0x268>)
 80010c6:	2210      	movs	r2, #16
 80010c8:	611a      	str	r2, [r3, #16]
   SX1278_hw.reset.port = RST_GPIO_Port;
 80010ca:	4b85      	ldr	r3, [pc, #532]	; (80012e0 <main+0x268>)
 80010cc:	4a85      	ldr	r2, [pc, #532]	; (80012e4 <main+0x26c>)
 80010ce:	605a      	str	r2, [r3, #4]
   SX1278_hw.reset.pin = RST_Pin;
 80010d0:	4b83      	ldr	r3, [pc, #524]	; (80012e0 <main+0x268>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
   SX1278_hw.spi = &hspi1;
 80010d6:	4b82      	ldr	r3, [pc, #520]	; (80012e0 <main+0x268>)
 80010d8:	4a83      	ldr	r2, [pc, #524]	; (80012e8 <main+0x270>)
 80010da:	619a      	str	r2, [r3, #24]

   SX1278.hw = &SX1278_hw;
 80010dc:	4b83      	ldr	r3, [pc, #524]	; (80012ec <main+0x274>)
 80010de:	4a80      	ldr	r2, [pc, #512]	; (80012e0 <main+0x268>)
 80010e0:	601a      	str	r2, [r3, #0]

   SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 80010e2:	230a      	movs	r3, #10
 80010e4:	9305      	str	r3, [sp, #20]
 80010e6:	2300      	movs	r3, #0
 80010e8:	9304      	str	r3, [sp, #16]
 80010ea:	2300      	movs	r3, #0
 80010ec:	9303      	str	r3, [sp, #12]
 80010ee:	2307      	movs	r3, #7
 80010f0:	9302      	str	r3, [sp, #8]
 80010f2:	2301      	movs	r3, #1
 80010f4:	9301      	str	r3, [sp, #4]
 80010f6:	2301      	movs	r3, #1
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	a373      	add	r3, pc, #460	; (adr r3, 80012c8 <main+0x250>)
 80010fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001100:	487a      	ldr	r0, [pc, #488]	; (80012ec <main+0x274>)
 8001102:	f7ff fe4f 	bl	8000da4 <SX1278_init>
   SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);

 	if (master == 1) {
 8001106:	4b7a      	ldr	r3, [pc, #488]	; (80012f0 <main+0x278>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d10f      	bne.n	800112e <main+0xb6>
 		ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 800110e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001112:	2110      	movs	r1, #16
 8001114:	4875      	ldr	r0, [pc, #468]	; (80012ec <main+0x274>)
 8001116:	f7ff fdae 	bl	8000c76 <SX1278_LoRaEntryTx>
 800111a:	4603      	mov	r3, r0
 800111c:	4a75      	ldr	r2, [pc, #468]	; (80012f4 <main+0x27c>)
 800111e:	6013      	str	r3, [r2, #0]
 		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001126:	4874      	ldr	r0, [pc, #464]	; (80012f8 <main+0x280>)
 8001128:	f001 fba9 	bl	800287e <HAL_GPIO_WritePin>
 800112c:	e00e      	b.n	800114c <main+0xd4>
 	} else {
 		ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 800112e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001132:	2110      	movs	r1, #16
 8001134:	486d      	ldr	r0, [pc, #436]	; (80012ec <main+0x274>)
 8001136:	f7ff fcf5 	bl	8000b24 <SX1278_LoRaEntryRx>
 800113a:	4603      	mov	r3, r0
 800113c:	4a6d      	ldr	r2, [pc, #436]	; (80012f4 <main+0x27c>)
 800113e:	6013      	str	r3, [r2, #0]
 		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001140:	2201      	movs	r2, #1
 8001142:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001146:	486c      	ldr	r0, [pc, #432]	; (80012f8 <main+0x280>)
 8001148:	f001 fb99 	bl	800287e <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  DHT_ReadTempHum(&dht11);
 800114c:	4863      	ldr	r0, [pc, #396]	; (80012dc <main+0x264>)
 800114e:	f7ff faaf 	bl	80006b0 <DHT_ReadTempHum>
	  HAL_Delay(2000);
 8001152:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001156:	f000 fc97 	bl	8001a88 <HAL_Delay>
	  buffer[5]= (uint8_t)dht11.Temp1 ;
 800115a:	4b60      	ldr	r3, [pc, #384]	; (80012dc <main+0x264>)
 800115c:	7b1a      	ldrb	r2, [r3, #12]
 800115e:	4b67      	ldr	r3, [pc, #412]	; (80012fc <main+0x284>)
 8001160:	715a      	strb	r2, [r3, #5]
	  buffer[6]= (uint8_t)dht11.Humi1 ;
 8001162:	4b5e      	ldr	r3, [pc, #376]	; (80012dc <main+0x264>)
 8001164:	7b9a      	ldrb	r2, [r3, #14]
 8001166:	4b65      	ldr	r3, [pc, #404]	; (80012fc <main+0x284>)
 8001168:	719a      	strb	r2, [r3, #6]



	  ADC_Select_CH0();
 800116a:	f7ff ff49 	bl	8001000 <ADC_Select_CH0>
	  HAL_ADC_Start(&hadc1);
 800116e:	4864      	ldr	r0, [pc, #400]	; (8001300 <main+0x288>)
 8001170:	f000 fd86 	bl	8001c80 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8001174:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001178:	4861      	ldr	r0, [pc, #388]	; (8001300 <main+0x288>)
 800117a:	f000 fe5b 	bl	8001e34 <HAL_ADC_PollForConversion>
	  Flame = HAL_ADC_GetValue(&hadc1);
 800117e:	4860      	ldr	r0, [pc, #384]	; (8001300 <main+0x288>)
 8001180:	f000 ff5e 	bl	8002040 <HAL_ADC_GetValue>
 8001184:	4603      	mov	r3, r0
 8001186:	b29a      	uxth	r2, r3
 8001188:	4b5e      	ldr	r3, [pc, #376]	; (8001304 <main+0x28c>)
 800118a:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 800118c:	485c      	ldr	r0, [pc, #368]	; (8001300 <main+0x288>)
 800118e:	f000 fe25 	bl	8001ddc <HAL_ADC_Stop>

	  ADC_Select_CH1();
 8001192:	f7ff ff53 	bl	800103c <ADC_Select_CH1>
	  HAL_ADC_Start(&hadc1);
 8001196:	485a      	ldr	r0, [pc, #360]	; (8001300 <main+0x288>)
 8001198:	f000 fd72 	bl	8001c80 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 800119c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011a0:	4857      	ldr	r0, [pc, #348]	; (8001300 <main+0x288>)
 80011a2:	f000 fe47 	bl	8001e34 <HAL_ADC_PollForConversion>
	  MQ2 = HAL_ADC_GetValue(&hadc1);
 80011a6:	4856      	ldr	r0, [pc, #344]	; (8001300 <main+0x288>)
 80011a8:	f000 ff4a 	bl	8002040 <HAL_ADC_GetValue>
 80011ac:	4603      	mov	r3, r0
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	4b55      	ldr	r3, [pc, #340]	; (8001308 <main+0x290>)
 80011b2:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 80011b4:	4852      	ldr	r0, [pc, #328]	; (8001300 <main+0x288>)
 80011b6:	f000 fe11 	bl	8001ddc <HAL_ADC_Stop>

	  HAL_Delay(1000);
 80011ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011be:	f000 fc63 	bl	8001a88 <HAL_Delay>
	  buffer[0]= (uint8_t)Flame ;
 80011c2:	4b50      	ldr	r3, [pc, #320]	; (8001304 <main+0x28c>)
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b4c      	ldr	r3, [pc, #304]	; (80012fc <main+0x284>)
 80011ca:	701a      	strb	r2, [r3, #0]
	  buffer[1]= (uint8_t)(Flame>>8) ;
 80011cc:	4b4d      	ldr	r3, [pc, #308]	; (8001304 <main+0x28c>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b49      	ldr	r3, [pc, #292]	; (80012fc <main+0x284>)
 80011d8:	705a      	strb	r2, [r3, #1]
	  buffer[2]= HAL_GPIO_ReadPin(GPIOB, Flame_Pin);
 80011da:	2108      	movs	r1, #8
 80011dc:	4841      	ldr	r0, [pc, #260]	; (80012e4 <main+0x26c>)
 80011de:	f001 fb37 	bl	8002850 <HAL_GPIO_ReadPin>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b45      	ldr	r3, [pc, #276]	; (80012fc <main+0x284>)
 80011e8:	709a      	strb	r2, [r3, #2]
	  buffer[3]= (uint8_t)MQ2 ;
 80011ea:	4b47      	ldr	r3, [pc, #284]	; (8001308 <main+0x290>)
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b42      	ldr	r3, [pc, #264]	; (80012fc <main+0x284>)
 80011f2:	70da      	strb	r2, [r3, #3]
	  buffer[4]= (uint8_t)(MQ2>>8) ;
 80011f4:	4b44      	ldr	r3, [pc, #272]	; (8001308 <main+0x290>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4b3f      	ldr	r3, [pc, #252]	; (80012fc <main+0x284>)
 8001200:	711a      	strb	r2, [r3, #4]

	  if (master == 1) {
 8001202:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <main+0x278>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d12b      	bne.n	8001262 <main+0x1ea>


		ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 800120a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800120e:	2110      	movs	r1, #16
 8001210:	4836      	ldr	r0, [pc, #216]	; (80012ec <main+0x274>)
 8001212:	f7ff fd30 	bl	8000c76 <SX1278_LoRaEntryTx>
 8001216:	4603      	mov	r3, r0
 8001218:	4a36      	ldr	r2, [pc, #216]	; (80012f4 <main+0x27c>)
 800121a:	6013      	str	r3, [r2, #0]

		ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) buffer,16, 2000);
 800121c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001220:	2210      	movs	r2, #16
 8001222:	4936      	ldr	r1, [pc, #216]	; (80012fc <main+0x284>)
 8001224:	4831      	ldr	r0, [pc, #196]	; (80012ec <main+0x274>)
 8001226:	f7ff fd7e 	bl	8000d26 <SX1278_LoRaTxPacket>
 800122a:	4603      	mov	r3, r0
 800122c:	4a31      	ldr	r2, [pc, #196]	; (80012f4 <main+0x27c>)
 800122e:	6013      	str	r3, [r2, #0]
		if(ret)
 8001230:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <main+0x27c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d089      	beq.n	800114c <main+0xd4>
		{
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800123e:	482e      	ldr	r0, [pc, #184]	; (80012f8 <main+0x280>)
 8001240:	f001 fb1d 	bl	800287e <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8001244:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001248:	f000 fc1e 	bl	8001a88 <HAL_Delay>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800124c:	2201      	movs	r2, #1
 800124e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001252:	4829      	ldr	r0, [pc, #164]	; (80012f8 <main+0x280>)
 8001254:	f001 fb13 	bl	800287e <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8001258:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800125c:	f000 fc14 	bl	8001a88 <HAL_Delay>
 8001260:	e774      	b.n	800114c <main+0xd4>
		}

	  } else {

		HAL_Delay(1000);
 8001262:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001266:	f000 fc0f 	bl	8001a88 <HAL_Delay>


		ret = SX1278_LoRaRxPacket(&SX1278);
 800126a:	4820      	ldr	r0, [pc, #128]	; (80012ec <main+0x274>)
 800126c:	f7ff fcbf 	bl	8000bee <SX1278_LoRaRxPacket>
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <main+0x27c>)
 8001276:	601a      	str	r2, [r3, #0]

		if (ret > 0) {
 8001278:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <main+0x27c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	f77f af65 	ble.w	800114c <main+0xd4>
			if(SX1278_read(&SX1278, (uint8_t*) buffer, ret)>0){
 8001282:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <main+0x27c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	461a      	mov	r2, r3
 800128a:	491c      	ldr	r1, [pc, #112]	; (80012fc <main+0x284>)
 800128c:	4817      	ldr	r0, [pc, #92]	; (80012ec <main+0x274>)
 800128e:	f7ff fdb6 	bl	8000dfe <SX1278_read>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	f43f af59 	beq.w	800114c <main+0xd4>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a0:	4815      	ldr	r0, [pc, #84]	; (80012f8 <main+0x280>)
 80012a2:	f001 faec 	bl	800287e <HAL_GPIO_WritePin>
				HAL_Delay(500);
 80012a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012aa:	f000 fbed 	bl	8001a88 <HAL_Delay>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80012ae:	2201      	movs	r2, #1
 80012b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012b4:	4810      	ldr	r0, [pc, #64]	; (80012f8 <main+0x280>)
 80012b6:	f001 fae2 	bl	800287e <HAL_GPIO_WritePin>
				HAL_Delay(500);
 80012ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012be:	f000 fbe3 	bl	8001a88 <HAL_Delay>
	  DHT_ReadTempHum(&dht11);
 80012c2:	e743      	b.n	800114c <main+0xd4>
 80012c4:	f3af 8000 	nop.w
 80012c8:	19de5080 	.word	0x19de5080
 80012cc:	00000000 	.word	0x00000000
 80012d0:	200000c4 	.word	0x200000c4
 80012d4:	40010800 	.word	0x40010800
 80012d8:	2000010c 	.word	0x2000010c
 80012dc:	20000154 	.word	0x20000154
 80012e0:	20000164 	.word	0x20000164
 80012e4:	40010c00 	.word	0x40010c00
 80012e8:	2000006c 	.word	0x2000006c
 80012ec:	20000180 	.word	0x20000180
 80012f0:	20000000 	.word	0x20000000
 80012f4:	20000298 	.word	0x20000298
 80012f8:	40011000 	.word	0x40011000
 80012fc:	20000004 	.word	0x20000004
 8001300:	2000003c 	.word	0x2000003c
 8001304:	2000029c 	.word	0x2000029c
 8001308:	2000029e 	.word	0x2000029e

0800130c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b094      	sub	sp, #80	; 0x50
 8001310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001312:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001316:	2228      	movs	r2, #40	; 0x28
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f002 ff12 	bl	8004144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800133c:	2301      	movs	r3, #1
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001340:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001344:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800134a:	2301      	movs	r3, #1
 800134c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134e:	2302      	movs	r3, #2
 8001350:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001352:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001356:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001358:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800135c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800135e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001362:	4618      	mov	r0, r3
 8001364:	f001 faa4 	bl	80028b0 <HAL_RCC_OscConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800136e:	f000 f9e5 	bl	800173c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001372:	230f      	movs	r3, #15
 8001374:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001376:	2302      	movs	r3, #2
 8001378:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800137e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001382:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	2102      	movs	r1, #2
 800138e:	4618      	mov	r0, r3
 8001390:	f001 fd10 	bl	8002db4 <HAL_RCC_ClockConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800139a:	f000 f9cf 	bl	800173c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800139e:	2302      	movs	r3, #2
 80013a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80013a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013a6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 fe7c 	bl	80030a8 <HAL_RCCEx_PeriphCLKConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013b6:	f000 f9c1 	bl	800173c <Error_Handler>
  }
}
 80013ba:	bf00      	nop
 80013bc:	3750      	adds	r7, #80	; 0x50
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013d4:	4b20      	ldr	r3, [pc, #128]	; (8001458 <MX_ADC1_Init+0x94>)
 80013d6:	4a21      	ldr	r2, [pc, #132]	; (800145c <MX_ADC1_Init+0x98>)
 80013d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013da:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <MX_ADC1_Init+0x94>)
 80013dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013e2:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <MX_ADC1_Init+0x94>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <MX_ADC1_Init+0x94>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ee:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <MX_ADC1_Init+0x94>)
 80013f0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80013f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013f6:	4b18      	ldr	r3, [pc, #96]	; (8001458 <MX_ADC1_Init+0x94>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80013fc:	4b16      	ldr	r3, [pc, #88]	; (8001458 <MX_ADC1_Init+0x94>)
 80013fe:	2202      	movs	r2, #2
 8001400:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001402:	4815      	ldr	r0, [pc, #84]	; (8001458 <MX_ADC1_Init+0x94>)
 8001404:	f000 fb64 	bl	8001ad0 <HAL_ADC_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800140e:	f000 f995 	bl	800173c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001416:	2301      	movs	r3, #1
 8001418:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	4619      	mov	r1, r3
 8001422:	480d      	ldr	r0, [pc, #52]	; (8001458 <MX_ADC1_Init+0x94>)
 8001424:	f000 fe18 	bl	8002058 <HAL_ADC_ConfigChannel>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800142e:	f000 f985 	bl	800173c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001432:	2301      	movs	r3, #1
 8001434:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001436:	2302      	movs	r3, #2
 8001438:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	4619      	mov	r1, r3
 800143e:	4806      	ldr	r0, [pc, #24]	; (8001458 <MX_ADC1_Init+0x94>)
 8001440:	f000 fe0a 	bl	8002058 <HAL_ADC_ConfigChannel>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800144a:	f000 f977 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000003c 	.word	0x2000003c
 800145c:	40012400 	.word	0x40012400

08001460 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <MX_SPI1_Init+0x64>)
 8001466:	4a18      	ldr	r2, [pc, #96]	; (80014c8 <MX_SPI1_Init+0x68>)
 8001468:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800146a:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <MX_SPI1_Init+0x64>)
 800146c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001470:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001472:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <MX_SPI1_Init+0x64>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <MX_SPI1_Init+0x64>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_SPI1_Init+0x64>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_SPI1_Init+0x64>)
 8001486:	2200      	movs	r2, #0
 8001488:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <MX_SPI1_Init+0x64>)
 800148c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001490:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_SPI1_Init+0x64>)
 8001494:	2210      	movs	r2, #16
 8001496:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <MX_SPI1_Init+0x64>)
 800149a:	2200      	movs	r2, #0
 800149c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_SPI1_Init+0x64>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014a4:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <MX_SPI1_Init+0x64>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_SPI1_Init+0x64>)
 80014ac:	220a      	movs	r2, #10
 80014ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014b0:	4804      	ldr	r0, [pc, #16]	; (80014c4 <MX_SPI1_Init+0x64>)
 80014b2:	f001 ff65 	bl	8003380 <HAL_SPI_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014bc:	f000 f93e 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	2000006c 	.word	0x2000006c
 80014c8:	40013000 	.word	0x40013000

080014cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d2:	f107 0308 	add.w	r3, r7, #8
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e0:	463b      	mov	r3, r7
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014e8:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <MX_TIM1_Init+0x98>)
 80014ea:	4a1f      	ldr	r2, [pc, #124]	; (8001568 <MX_TIM1_Init+0x9c>)
 80014ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80014ee:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <MX_TIM1_Init+0x98>)
 80014f0:	2247      	movs	r2, #71	; 0x47
 80014f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f4:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <MX_TIM1_Init+0x98>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 80014fa:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <MX_TIM1_Init+0x98>)
 80014fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001500:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001502:	4b18      	ldr	r3, [pc, #96]	; (8001564 <MX_TIM1_Init+0x98>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001508:	4b16      	ldr	r3, [pc, #88]	; (8001564 <MX_TIM1_Init+0x98>)
 800150a:	2200      	movs	r2, #0
 800150c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <MX_TIM1_Init+0x98>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001514:	4813      	ldr	r0, [pc, #76]	; (8001564 <MX_TIM1_Init+0x98>)
 8001516:	f002 fb5d 	bl	8003bd4 <HAL_TIM_Base_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001520:	f000 f90c 	bl	800173c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001528:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800152a:	f107 0308 	add.w	r3, r7, #8
 800152e:	4619      	mov	r1, r3
 8001530:	480c      	ldr	r0, [pc, #48]	; (8001564 <MX_TIM1_Init+0x98>)
 8001532:	f002 fbe9 	bl	8003d08 <HAL_TIM_ConfigClockSource>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800153c:	f000 f8fe 	bl	800173c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001548:	463b      	mov	r3, r7
 800154a:	4619      	mov	r1, r3
 800154c:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_TIM1_Init+0x98>)
 800154e:	f002 fd9b 	bl	8004088 <HAL_TIMEx_MasterConfigSynchronization>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001558:	f000 f8f0 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	200000c4 	.word	0x200000c4
 8001568:	40012c00 	.word	0x40012c00

0800156c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001572:	f107 0308 	add.w	r3, r7, #8
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001580:	463b      	mov	r3, r7
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001588:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <MX_TIM4_Init+0x94>)
 800158a:	4a1e      	ldr	r2, [pc, #120]	; (8001604 <MX_TIM4_Init+0x98>)
 800158c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 800158e:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <MX_TIM4_Init+0x94>)
 8001590:	2247      	movs	r2, #71	; 0x47
 8001592:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001594:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <MX_TIM4_Init+0x94>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xFFFF-1;
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <MX_TIM4_Init+0x94>)
 800159c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <MX_TIM4_Init+0x94>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a8:	4b15      	ldr	r3, [pc, #84]	; (8001600 <MX_TIM4_Init+0x94>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015ae:	4814      	ldr	r0, [pc, #80]	; (8001600 <MX_TIM4_Init+0x94>)
 80015b0:	f002 fb10 	bl	8003bd4 <HAL_TIM_Base_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80015ba:	f000 f8bf 	bl	800173c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015c4:	f107 0308 	add.w	r3, r7, #8
 80015c8:	4619      	mov	r1, r3
 80015ca:	480d      	ldr	r0, [pc, #52]	; (8001600 <MX_TIM4_Init+0x94>)
 80015cc:	f002 fb9c 	bl	8003d08 <HAL_TIM_ConfigClockSource>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80015d6:	f000 f8b1 	bl	800173c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015e2:	463b      	mov	r3, r7
 80015e4:	4619      	mov	r1, r3
 80015e6:	4806      	ldr	r0, [pc, #24]	; (8001600 <MX_TIM4_Init+0x94>)
 80015e8:	f002 fd4e 	bl	8004088 <HAL_TIMEx_MasterConfigSynchronization>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80015f2:	f000 f8a3 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	2000010c 	.word	0x2000010c
 8001604:	40000800 	.word	0x40000800

08001608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160e:	f107 0310 	add.w	r3, r7, #16
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800161c:	4b43      	ldr	r3, [pc, #268]	; (800172c <MX_GPIO_Init+0x124>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	4a42      	ldr	r2, [pc, #264]	; (800172c <MX_GPIO_Init+0x124>)
 8001622:	f043 0310 	orr.w	r3, r3, #16
 8001626:	6193      	str	r3, [r2, #24]
 8001628:	4b40      	ldr	r3, [pc, #256]	; (800172c <MX_GPIO_Init+0x124>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	f003 0310 	and.w	r3, r3, #16
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001634:	4b3d      	ldr	r3, [pc, #244]	; (800172c <MX_GPIO_Init+0x124>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	4a3c      	ldr	r2, [pc, #240]	; (800172c <MX_GPIO_Init+0x124>)
 800163a:	f043 0320 	orr.w	r3, r3, #32
 800163e:	6193      	str	r3, [r2, #24]
 8001640:	4b3a      	ldr	r3, [pc, #232]	; (800172c <MX_GPIO_Init+0x124>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	f003 0320 	and.w	r3, r3, #32
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800164c:	4b37      	ldr	r3, [pc, #220]	; (800172c <MX_GPIO_Init+0x124>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	4a36      	ldr	r2, [pc, #216]	; (800172c <MX_GPIO_Init+0x124>)
 8001652:	f043 0304 	orr.w	r3, r3, #4
 8001656:	6193      	str	r3, [r2, #24]
 8001658:	4b34      	ldr	r3, [pc, #208]	; (800172c <MX_GPIO_Init+0x124>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001664:	4b31      	ldr	r3, [pc, #196]	; (800172c <MX_GPIO_Init+0x124>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	4a30      	ldr	r2, [pc, #192]	; (800172c <MX_GPIO_Init+0x124>)
 800166a:	f043 0308 	orr.w	r3, r3, #8
 800166e:	6193      	str	r3, [r2, #24]
 8001670:	4b2e      	ldr	r3, [pc, #184]	; (800172c <MX_GPIO_Init+0x124>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	f003 0308 	and.w	r3, r3, #8
 8001678:	603b      	str	r3, [r7, #0]
 800167a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001682:	482b      	ldr	r0, [pc, #172]	; (8001730 <MX_GPIO_Init+0x128>)
 8001684:	f001 f8fb 	bl	800287e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001688:	2201      	movs	r2, #1
 800168a:	2110      	movs	r1, #16
 800168c:	4829      	ldr	r0, [pc, #164]	; (8001734 <MX_GPIO_Init+0x12c>)
 800168e:	f001 f8f6 	bl	800287e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8001692:	2201      	movs	r2, #1
 8001694:	2101      	movs	r1, #1
 8001696:	4828      	ldr	r0, [pc, #160]	; (8001738 <MX_GPIO_Init+0x130>)
 8001698:	f001 f8f1 	bl	800287e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800169c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a2:	2301      	movs	r3, #1
 80016a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2302      	movs	r3, #2
 80016ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 0310 	add.w	r3, r7, #16
 80016b2:	4619      	mov	r1, r3
 80016b4:	481e      	ldr	r0, [pc, #120]	; (8001730 <MX_GPIO_Init+0x128>)
 80016b6:	f000 ff47 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 80016ba:	2310      	movs	r3, #16
 80016bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016be:	2301      	movs	r3, #1
 80016c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2302      	movs	r3, #2
 80016c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 80016ca:	f107 0310 	add.w	r3, r7, #16
 80016ce:	4619      	mov	r1, r3
 80016d0:	4818      	ldr	r0, [pc, #96]	; (8001734 <MX_GPIO_Init+0x12c>)
 80016d2:	f000 ff39 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 80016d6:	2301      	movs	r3, #1
 80016d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016da:	2301      	movs	r3, #1
 80016dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2302      	movs	r3, #2
 80016e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80016e6:	f107 0310 	add.w	r3, r7, #16
 80016ea:	4619      	mov	r1, r3
 80016ec:	4812      	ldr	r0, [pc, #72]	; (8001738 <MX_GPIO_Init+0x130>)
 80016ee:	f000 ff2b 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Pin Flame_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin|Flame_Pin;
 80016f2:	230a      	movs	r3, #10
 80016f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fe:	f107 0310 	add.w	r3, r7, #16
 8001702:	4619      	mov	r1, r3
 8001704:	480c      	ldr	r0, [pc, #48]	; (8001738 <MX_GPIO_Init+0x130>)
 8001706:	f000 ff1f 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT_Pin */
  GPIO_InitStruct.Pin = DHT_Pin;
 800170a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001714:	2301      	movs	r3, #1
 8001716:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	4619      	mov	r1, r3
 800171e:	4805      	ldr	r0, [pc, #20]	; (8001734 <MX_GPIO_Init+0x12c>)
 8001720:	f000 ff12 	bl	8002548 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001724:	bf00      	nop
 8001726:	3720      	adds	r7, #32
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40021000 	.word	0x40021000
 8001730:	40011000 	.word	0x40011000
 8001734:	40010800 	.word	0x40010800
 8001738:	40010c00 	.word	0x40010c00

0800173c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001740:	b672      	cpsid	i
}
 8001742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001744:	e7fe      	b.n	8001744 <Error_Handler+0x8>
	...

08001748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_MspInit+0x5c>)
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	4a14      	ldr	r2, [pc, #80]	; (80017a4 <HAL_MspInit+0x5c>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6193      	str	r3, [r2, #24]
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_MspInit+0x5c>)
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <HAL_MspInit+0x5c>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	4a0e      	ldr	r2, [pc, #56]	; (80017a4 <HAL_MspInit+0x5c>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001770:	61d3      	str	r3, [r2, #28]
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <HAL_MspInit+0x5c>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <HAL_MspInit+0x60>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <HAL_MspInit+0x60>)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40010000 	.word	0x40010000

080017ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a14      	ldr	r2, [pc, #80]	; (8001818 <HAL_ADC_MspInit+0x6c>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d121      	bne.n	8001810 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <HAL_ADC_MspInit+0x70>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	4a12      	ldr	r2, [pc, #72]	; (800181c <HAL_ADC_MspInit+0x70>)
 80017d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017d6:	6193      	str	r3, [r2, #24]
 80017d8:	4b10      	ldr	r3, [pc, #64]	; (800181c <HAL_ADC_MspInit+0x70>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e4:	4b0d      	ldr	r3, [pc, #52]	; (800181c <HAL_ADC_MspInit+0x70>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	4a0c      	ldr	r2, [pc, #48]	; (800181c <HAL_ADC_MspInit+0x70>)
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	6193      	str	r3, [r2, #24]
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_ADC_MspInit+0x70>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017fc:	2303      	movs	r3, #3
 80017fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001800:	2303      	movs	r3, #3
 8001802:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 0310 	add.w	r3, r7, #16
 8001808:	4619      	mov	r1, r3
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <HAL_ADC_MspInit+0x74>)
 800180c:	f000 fe9c 	bl	8002548 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001810:	bf00      	nop
 8001812:	3720      	adds	r7, #32
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40012400 	.word	0x40012400
 800181c:	40021000 	.word	0x40021000
 8001820:	40010800 	.word	0x40010800

08001824 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0310 	add.w	r3, r7, #16
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a1b      	ldr	r2, [pc, #108]	; (80018ac <HAL_SPI_MspInit+0x88>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d12f      	bne.n	80018a4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001844:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <HAL_SPI_MspInit+0x8c>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	4a19      	ldr	r2, [pc, #100]	; (80018b0 <HAL_SPI_MspInit+0x8c>)
 800184a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800184e:	6193      	str	r3, [r2, #24]
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <HAL_SPI_MspInit+0x8c>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <HAL_SPI_MspInit+0x8c>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	4a13      	ldr	r2, [pc, #76]	; (80018b0 <HAL_SPI_MspInit+0x8c>)
 8001862:	f043 0304 	orr.w	r3, r3, #4
 8001866:	6193      	str	r3, [r2, #24]
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <HAL_SPI_MspInit+0x8c>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001874:	23a0      	movs	r3, #160	; 0xa0
 8001876:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001878:	2302      	movs	r3, #2
 800187a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	4619      	mov	r1, r3
 8001886:	480b      	ldr	r0, [pc, #44]	; (80018b4 <HAL_SPI_MspInit+0x90>)
 8001888:	f000 fe5e 	bl	8002548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800188c:	2340      	movs	r3, #64	; 0x40
 800188e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001898:	f107 0310 	add.w	r3, r7, #16
 800189c:	4619      	mov	r1, r3
 800189e:	4805      	ldr	r0, [pc, #20]	; (80018b4 <HAL_SPI_MspInit+0x90>)
 80018a0:	f000 fe52 	bl	8002548 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018a4:	bf00      	nop
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40013000 	.word	0x40013000
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010800 	.word	0x40010800

080018b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a12      	ldr	r2, [pc, #72]	; (8001910 <HAL_TIM_Base_MspInit+0x58>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d10c      	bne.n	80018e4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_TIM_Base_MspInit+0x5c>)
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	4a11      	ldr	r2, [pc, #68]	; (8001914 <HAL_TIM_Base_MspInit+0x5c>)
 80018d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018d4:	6193      	str	r3, [r2, #24]
 80018d6:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <HAL_TIM_Base_MspInit+0x5c>)
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80018e2:	e010      	b.n	8001906 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0b      	ldr	r2, [pc, #44]	; (8001918 <HAL_TIM_Base_MspInit+0x60>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d10b      	bne.n	8001906 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_TIM_Base_MspInit+0x5c>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	4a08      	ldr	r2, [pc, #32]	; (8001914 <HAL_TIM_Base_MspInit+0x5c>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	61d3      	str	r3, [r2, #28]
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_TIM_Base_MspInit+0x5c>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
}
 8001906:	bf00      	nop
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	40012c00 	.word	0x40012c00
 8001914:	40021000 	.word	0x40021000
 8001918:	40000800 	.word	0x40000800

0800191c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <NMI_Handler+0x4>

08001922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001926:	e7fe      	b.n	8001926 <HardFault_Handler+0x4>

08001928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800192c:	e7fe      	b.n	800192c <MemManage_Handler+0x4>

0800192e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001932:	e7fe      	b.n	8001932 <BusFault_Handler+0x4>

08001934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <UsageFault_Handler+0x4>

0800193a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr

08001946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr

08001952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr

0800195e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001962:	f000 f875 	bl	8001a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}

0800196a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
	...

08001978 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001978:	f7ff fff7 	bl	800196a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800197c:	480b      	ldr	r0, [pc, #44]	; (80019ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800197e:	490c      	ldr	r1, [pc, #48]	; (80019b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001980:	4a0c      	ldr	r2, [pc, #48]	; (80019b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001984:	e002      	b.n	800198c <LoopCopyDataInit>

08001986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198a:	3304      	adds	r3, #4

0800198c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800198c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001990:	d3f9      	bcc.n	8001986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001992:	4a09      	ldr	r2, [pc, #36]	; (80019b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001994:	4c09      	ldr	r4, [pc, #36]	; (80019bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001998:	e001      	b.n	800199e <LoopFillZerobss>

0800199a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800199c:	3204      	adds	r2, #4

0800199e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a0:	d3fb      	bcc.n	800199a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019a2:	f002 fbd7 	bl	8004154 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019a6:	f7ff fb67 	bl	8001078 <main>
  bx lr
 80019aa:	4770      	bx	lr
  ldr r0, =_sdata
 80019ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80019b4:	08004240 	.word	0x08004240
  ldr r2, =_sbss
 80019b8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80019bc:	200002a4 	.word	0x200002a4

080019c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019c0:	e7fe      	b.n	80019c0 <ADC1_2_IRQHandler>
	...

080019c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <HAL_Init+0x28>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a07      	ldr	r2, [pc, #28]	; (80019ec <HAL_Init+0x28>)
 80019ce:	f043 0310 	orr.w	r3, r3, #16
 80019d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d4:	2003      	movs	r0, #3
 80019d6:	f000 fd83 	bl	80024e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019da:	200f      	movs	r0, #15
 80019dc:	f000 f808 	bl	80019f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019e0:	f7ff feb2 	bl	8001748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40022000 	.word	0x40022000

080019f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_InitTick+0x54>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_InitTick+0x58>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4619      	mov	r1, r3
 8001a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 fd8d 	bl	800252e <HAL_SYSTICK_Config>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e00e      	b.n	8001a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b0f      	cmp	r3, #15
 8001a22:	d80a      	bhi.n	8001a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a24:	2200      	movs	r2, #0
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	f04f 30ff 	mov.w	r0, #4294967295
 8001a2c:	f000 fd63 	bl	80024f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a30:	4a06      	ldr	r2, [pc, #24]	; (8001a4c <HAL_InitTick+0x5c>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	e000      	b.n	8001a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000014 	.word	0x20000014
 8001a48:	2000001c 	.word	0x2000001c
 8001a4c:	20000018 	.word	0x20000018

08001a50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <HAL_IncTick+0x1c>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_IncTick+0x20>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4413      	add	r3, r2
 8001a60:	4a03      	ldr	r2, [pc, #12]	; (8001a70 <HAL_IncTick+0x20>)
 8001a62:	6013      	str	r3, [r2, #0]
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr
 8001a6c:	2000001c 	.word	0x2000001c
 8001a70:	200002a0 	.word	0x200002a0

08001a74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return uwTick;
 8001a78:	4b02      	ldr	r3, [pc, #8]	; (8001a84 <HAL_GetTick+0x10>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	200002a0 	.word	0x200002a0

08001a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a90:	f7ff fff0 	bl	8001a74 <HAL_GetTick>
 8001a94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa0:	d005      	beq.n	8001aae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <HAL_Delay+0x44>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4413      	add	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aae:	bf00      	nop
 8001ab0:	f7ff ffe0 	bl	8001a74 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d8f7      	bhi.n	8001ab0 <HAL_Delay+0x28>
  {
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	2000001c 	.word	0x2000001c

08001ad0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e0be      	b.n	8001c70 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d109      	bne.n	8001b14 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff fe4c 	bl	80017ac <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 fbf1 	bl	80022fc <ADC_ConversionStop_Disable>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b22:	f003 0310 	and.w	r3, r3, #16
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f040 8099 	bne.w	8001c5e <HAL_ADC_Init+0x18e>
 8001b2c:	7dfb      	ldrb	r3, [r7, #23]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f040 8095 	bne.w	8001c5e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b38:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b3c:	f023 0302 	bic.w	r3, r3, #2
 8001b40:	f043 0202 	orr.w	r2, r3, #2
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b50:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	7b1b      	ldrb	r3, [r3, #12]
 8001b56:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b58:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b68:	d003      	beq.n	8001b72 <HAL_ADC_Init+0xa2>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d102      	bne.n	8001b78 <HAL_ADC_Init+0xa8>
 8001b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b76:	e000      	b.n	8001b7a <HAL_ADC_Init+0xaa>
 8001b78:	2300      	movs	r3, #0
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7d1b      	ldrb	r3, [r3, #20]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d119      	bne.n	8001bbc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	7b1b      	ldrb	r3, [r3, #12]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d109      	bne.n	8001ba4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	3b01      	subs	r3, #1
 8001b96:	035a      	lsls	r2, r3, #13
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	e00b      	b.n	8001bbc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba8:	f043 0220 	orr.w	r2, r3, #32
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb4:	f043 0201 	orr.w	r2, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	4b28      	ldr	r3, [pc, #160]	; (8001c78 <HAL_ADC_Init+0x1a8>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	68b9      	ldr	r1, [r7, #8]
 8001be0:	430b      	orrs	r3, r1
 8001be2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bec:	d003      	beq.n	8001bf6 <HAL_ADC_Init+0x126>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d104      	bne.n	8001c00 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	051b      	lsls	r3, r3, #20
 8001bfe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c06:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <HAL_ADC_Init+0x1ac>)
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d10b      	bne.n	8001c3c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2e:	f023 0303 	bic.w	r3, r3, #3
 8001c32:	f043 0201 	orr.w	r2, r3, #1
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c3a:	e018      	b.n	8001c6e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	f023 0312 	bic.w	r3, r3, #18
 8001c44:	f043 0210 	orr.w	r2, r3, #16
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	f043 0201 	orr.w	r2, r3, #1
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c5c:	e007      	b.n	8001c6e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c62:	f043 0210 	orr.w	r2, r3, #16
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	ffe1f7fd 	.word	0xffe1f7fd
 8001c7c:	ff1f0efe 	.word	0xff1f0efe

08001c80 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d101      	bne.n	8001c9a <HAL_ADC_Start+0x1a>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e098      	b.n	8001dcc <HAL_ADC_Start+0x14c>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 fad0 	bl	8002248 <ADC_Enable>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f040 8087 	bne.w	8001dc2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a41      	ldr	r2, [pc, #260]	; (8001dd4 <HAL_ADC_Start+0x154>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d105      	bne.n	8001cde <HAL_ADC_Start+0x5e>
 8001cd2:	4b41      	ldr	r3, [pc, #260]	; (8001dd8 <HAL_ADC_Start+0x158>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d115      	bne.n	8001d0a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d026      	beq.n	8001d46 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d00:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d08:	e01d      	b.n	8001d46 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a2f      	ldr	r2, [pc, #188]	; (8001dd8 <HAL_ADC_Start+0x158>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d004      	beq.n	8001d2a <HAL_ADC_Start+0xaa>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a2b      	ldr	r2, [pc, #172]	; (8001dd4 <HAL_ADC_Start+0x154>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d10d      	bne.n	8001d46 <HAL_ADC_Start+0xc6>
 8001d2a:	4b2b      	ldr	r3, [pc, #172]	; (8001dd8 <HAL_ADC_Start+0x158>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d007      	beq.n	8001d46 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d3e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d006      	beq.n	8001d60 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d56:	f023 0206 	bic.w	r2, r3, #6
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d5e:	e002      	b.n	8001d66 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f06f 0202 	mvn.w	r2, #2
 8001d76:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d82:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d86:	d113      	bne.n	8001db0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d8c:	4a11      	ldr	r2, [pc, #68]	; (8001dd4 <HAL_ADC_Start+0x154>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d105      	bne.n	8001d9e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <HAL_ADC_Start+0x158>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d108      	bne.n	8001db0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	e00c      	b.n	8001dca <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	e003      	b.n	8001dca <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40012800 	.word	0x40012800
 8001dd8:	40012400 	.word	0x40012400

08001ddc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de4:	2300      	movs	r3, #0
 8001de6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d101      	bne.n	8001df6 <HAL_ADC_Stop+0x1a>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e01a      	b.n	8001e2c <HAL_ADC_Stop+0x50>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 fa7c 	bl	80022fc <ADC_ConversionStop_Disable>
 8001e04:	4603      	mov	r3, r0
 8001e06:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d109      	bne.n	8001e22 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e12:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e16:	f023 0301 	bic.w	r3, r3, #1
 8001e1a:	f043 0201 	orr.w	r2, r3, #1
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e34:	b590      	push	{r4, r7, lr}
 8001e36:	b087      	sub	sp, #28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e4a:	f7ff fe13 	bl	8001a74 <HAL_GetTick>
 8001e4e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00b      	beq.n	8001e76 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e62:	f043 0220 	orr.w	r2, r3, #32
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e0d3      	b.n	800201e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d131      	bne.n	8001ee8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d12a      	bne.n	8001ee8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e92:	e021      	b.n	8001ed8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9a:	d01d      	beq.n	8001ed8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d007      	beq.n	8001eb2 <HAL_ADC_PollForConversion+0x7e>
 8001ea2:	f7ff fde7 	bl	8001a74 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d212      	bcs.n	8001ed8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10b      	bne.n	8001ed8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec4:	f043 0204 	orr.w	r2, r3, #4
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e0a2      	b.n	800201e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0d6      	beq.n	8001e94 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001ee6:	e070      	b.n	8001fca <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001ee8:	4b4f      	ldr	r3, [pc, #316]	; (8002028 <HAL_ADC_PollForConversion+0x1f4>)
 8001eea:	681c      	ldr	r4, [r3, #0]
 8001eec:	2002      	movs	r0, #2
 8001eee:	f001 f991 	bl	8003214 <HAL_RCCEx_GetPeriphCLKFreq>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6919      	ldr	r1, [r3, #16]
 8001efe:	4b4b      	ldr	r3, [pc, #300]	; (800202c <HAL_ADC_PollForConversion+0x1f8>)
 8001f00:	400b      	ands	r3, r1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d118      	bne.n	8001f38 <HAL_ADC_PollForConversion+0x104>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68d9      	ldr	r1, [r3, #12]
 8001f0c:	4b48      	ldr	r3, [pc, #288]	; (8002030 <HAL_ADC_PollForConversion+0x1fc>)
 8001f0e:	400b      	ands	r3, r1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d111      	bne.n	8001f38 <HAL_ADC_PollForConversion+0x104>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6919      	ldr	r1, [r3, #16]
 8001f1a:	4b46      	ldr	r3, [pc, #280]	; (8002034 <HAL_ADC_PollForConversion+0x200>)
 8001f1c:	400b      	ands	r3, r1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d108      	bne.n	8001f34 <HAL_ADC_PollForConversion+0x100>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68d9      	ldr	r1, [r3, #12]
 8001f28:	4b43      	ldr	r3, [pc, #268]	; (8002038 <HAL_ADC_PollForConversion+0x204>)
 8001f2a:	400b      	ands	r3, r1
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_ADC_PollForConversion+0x100>
 8001f30:	2314      	movs	r3, #20
 8001f32:	e020      	b.n	8001f76 <HAL_ADC_PollForConversion+0x142>
 8001f34:	2329      	movs	r3, #41	; 0x29
 8001f36:	e01e      	b.n	8001f76 <HAL_ADC_PollForConversion+0x142>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6919      	ldr	r1, [r3, #16]
 8001f3e:	4b3d      	ldr	r3, [pc, #244]	; (8002034 <HAL_ADC_PollForConversion+0x200>)
 8001f40:	400b      	ands	r3, r1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d106      	bne.n	8001f54 <HAL_ADC_PollForConversion+0x120>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68d9      	ldr	r1, [r3, #12]
 8001f4c:	4b3a      	ldr	r3, [pc, #232]	; (8002038 <HAL_ADC_PollForConversion+0x204>)
 8001f4e:	400b      	ands	r3, r1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00d      	beq.n	8001f70 <HAL_ADC_PollForConversion+0x13c>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6919      	ldr	r1, [r3, #16]
 8001f5a:	4b38      	ldr	r3, [pc, #224]	; (800203c <HAL_ADC_PollForConversion+0x208>)
 8001f5c:	400b      	ands	r3, r1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d108      	bne.n	8001f74 <HAL_ADC_PollForConversion+0x140>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68d9      	ldr	r1, [r3, #12]
 8001f68:	4b34      	ldr	r3, [pc, #208]	; (800203c <HAL_ADC_PollForConversion+0x208>)
 8001f6a:	400b      	ands	r3, r1
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_ADC_PollForConversion+0x140>
 8001f70:	2354      	movs	r3, #84	; 0x54
 8001f72:	e000      	b.n	8001f76 <HAL_ADC_PollForConversion+0x142>
 8001f74:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001f76:	fb02 f303 	mul.w	r3, r2, r3
 8001f7a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f7c:	e021      	b.n	8001fc2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f84:	d01a      	beq.n	8001fbc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d007      	beq.n	8001f9c <HAL_ADC_PollForConversion+0x168>
 8001f8c:	f7ff fd72 	bl	8001a74 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d20f      	bcs.n	8001fbc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d90b      	bls.n	8001fbc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa8:	f043 0204 	orr.w	r2, r3, #4
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e030      	b.n	800201e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d8d9      	bhi.n	8001f7e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f06f 0212 	mvn.w	r2, #18
 8001fd2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001fea:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001fee:	d115      	bne.n	800201c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d111      	bne.n	800201c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002008:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d105      	bne.n	800201c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	f043 0201 	orr.w	r2, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	371c      	adds	r7, #28
 8002022:	46bd      	mov	sp, r7
 8002024:	bd90      	pop	{r4, r7, pc}
 8002026:	bf00      	nop
 8002028:	20000014 	.word	0x20000014
 800202c:	24924924 	.word	0x24924924
 8002030:	00924924 	.word	0x00924924
 8002034:	12492492 	.word	0x12492492
 8002038:	00492492 	.word	0x00492492
 800203c:	00249249 	.word	0x00249249

08002040 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr

08002058 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002062:	2300      	movs	r3, #0
 8002064:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x20>
 8002074:	2302      	movs	r3, #2
 8002076:	e0dc      	b.n	8002232 <HAL_ADC_ConfigChannel+0x1da>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b06      	cmp	r3, #6
 8002086:	d81c      	bhi.n	80020c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	3b05      	subs	r3, #5
 800209a:	221f      	movs	r2, #31
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	4019      	ands	r1, r3
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	3b05      	subs	r3, #5
 80020b4:	fa00 f203 	lsl.w	r2, r0, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	635a      	str	r2, [r3, #52]	; 0x34
 80020c0:	e03c      	b.n	800213c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b0c      	cmp	r3, #12
 80020c8:	d81c      	bhi.n	8002104 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	3b23      	subs	r3, #35	; 0x23
 80020dc:	221f      	movs	r2, #31
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43db      	mvns	r3, r3
 80020e4:	4019      	ands	r1, r3
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	6818      	ldr	r0, [r3, #0]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	3b23      	subs	r3, #35	; 0x23
 80020f6:	fa00 f203 	lsl.w	r2, r0, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	631a      	str	r2, [r3, #48]	; 0x30
 8002102:	e01b      	b.n	800213c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	3b41      	subs	r3, #65	; 0x41
 8002116:	221f      	movs	r2, #31
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	4019      	ands	r1, r3
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	3b41      	subs	r3, #65	; 0x41
 8002130:	fa00 f203 	lsl.w	r2, r0, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b09      	cmp	r3, #9
 8002142:	d91c      	bls.n	800217e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68d9      	ldr	r1, [r3, #12]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	4613      	mov	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	4413      	add	r3, r2
 8002154:	3b1e      	subs	r3, #30
 8002156:	2207      	movs	r2, #7
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	4019      	ands	r1, r3
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	6898      	ldr	r0, [r3, #8]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4613      	mov	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	3b1e      	subs	r3, #30
 8002170:	fa00 f203 	lsl.w	r2, r0, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	60da      	str	r2, [r3, #12]
 800217c:	e019      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6919      	ldr	r1, [r3, #16]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4613      	mov	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4413      	add	r3, r2
 800218e:	2207      	movs	r2, #7
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	4019      	ands	r1, r3
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	6898      	ldr	r0, [r3, #8]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4613      	mov	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4413      	add	r3, r2
 80021a6:	fa00 f203 	lsl.w	r2, r0, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b10      	cmp	r3, #16
 80021b8:	d003      	beq.n	80021c2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021be:	2b11      	cmp	r3, #17
 80021c0:	d132      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a1d      	ldr	r2, [pc, #116]	; (800223c <HAL_ADC_ConfigChannel+0x1e4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d125      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d126      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80021e8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2b10      	cmp	r3, #16
 80021f0:	d11a      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021f2:	4b13      	ldr	r3, [pc, #76]	; (8002240 <HAL_ADC_ConfigChannel+0x1e8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a13      	ldr	r2, [pc, #76]	; (8002244 <HAL_ADC_ConfigChannel+0x1ec>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	0c9a      	lsrs	r2, r3, #18
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002208:	e002      	b.n	8002210 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	3b01      	subs	r3, #1
 800220e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f9      	bne.n	800220a <HAL_ADC_ConfigChannel+0x1b2>
 8002216:	e007      	b.n	8002228 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221c:	f043 0220 	orr.w	r2, r3, #32
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002230:	7bfb      	ldrb	r3, [r7, #15]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr
 800223c:	40012400 	.word	0x40012400
 8002240:	20000014 	.word	0x20000014
 8002244:	431bde83 	.word	0x431bde83

08002248 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b01      	cmp	r3, #1
 8002264:	d040      	beq.n	80022e8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0201 	orr.w	r2, r2, #1
 8002274:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002276:	4b1f      	ldr	r3, [pc, #124]	; (80022f4 <ADC_Enable+0xac>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a1f      	ldr	r2, [pc, #124]	; (80022f8 <ADC_Enable+0xb0>)
 800227c:	fba2 2303 	umull	r2, r3, r2, r3
 8002280:	0c9b      	lsrs	r3, r3, #18
 8002282:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002284:	e002      	b.n	800228c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	3b01      	subs	r3, #1
 800228a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f9      	bne.n	8002286 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002292:	f7ff fbef 	bl	8001a74 <HAL_GetTick>
 8002296:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002298:	e01f      	b.n	80022da <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800229a:	f7ff fbeb 	bl	8001a74 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d918      	bls.n	80022da <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d011      	beq.n	80022da <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	f043 0210 	orr.w	r2, r3, #16
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c6:	f043 0201 	orr.w	r2, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e007      	b.n	80022ea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d1d8      	bne.n	800229a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000014 	.word	0x20000014
 80022f8:	431bde83 	.word	0x431bde83

080022fc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b01      	cmp	r3, #1
 8002314:	d12e      	bne.n	8002374 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0201 	bic.w	r2, r2, #1
 8002324:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002326:	f7ff fba5 	bl	8001a74 <HAL_GetTick>
 800232a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800232c:	e01b      	b.n	8002366 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800232e:	f7ff fba1 	bl	8001a74 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d914      	bls.n	8002366 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b01      	cmp	r3, #1
 8002348:	d10d      	bne.n	8002366 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234e:	f043 0210 	orr.w	r2, r3, #16
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235a:	f043 0201 	orr.w	r2, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e007      	b.n	8002376 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b01      	cmp	r3, #1
 8002372:	d0dc      	beq.n	800232e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800239c:	4013      	ands	r3, r2
 800239e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b2:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	60d3      	str	r3, [r2, #12]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023cc:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	0a1b      	lsrs	r3, r3, #8
 80023d2:	f003 0307 	and.w	r3, r3, #7
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	db0a      	blt.n	800240e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	490c      	ldr	r1, [pc, #48]	; (8002430 <__NVIC_SetPriority+0x4c>)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	0112      	lsls	r2, r2, #4
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	440b      	add	r3, r1
 8002408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800240c:	e00a      	b.n	8002424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4908      	ldr	r1, [pc, #32]	; (8002434 <__NVIC_SetPriority+0x50>)
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	3b04      	subs	r3, #4
 800241c:	0112      	lsls	r2, r2, #4
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	440b      	add	r3, r1
 8002422:	761a      	strb	r2, [r3, #24]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000e100 	.word	0xe000e100
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002438:	b480      	push	{r7}
 800243a:	b089      	sub	sp, #36	; 0x24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f1c3 0307 	rsb	r3, r3, #7
 8002452:	2b04      	cmp	r3, #4
 8002454:	bf28      	it	cs
 8002456:	2304      	movcs	r3, #4
 8002458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3304      	adds	r3, #4
 800245e:	2b06      	cmp	r3, #6
 8002460:	d902      	bls.n	8002468 <NVIC_EncodePriority+0x30>
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3b03      	subs	r3, #3
 8002466:	e000      	b.n	800246a <NVIC_EncodePriority+0x32>
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246c:	f04f 32ff 	mov.w	r2, #4294967295
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43da      	mvns	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	401a      	ands	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002480:	f04f 31ff 	mov.w	r1, #4294967295
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	43d9      	mvns	r1, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002490:	4313      	orrs	r3, r2
         );
}
 8002492:	4618      	mov	r0, r3
 8002494:	3724      	adds	r7, #36	; 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024ac:	d301      	bcc.n	80024b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ae:	2301      	movs	r3, #1
 80024b0:	e00f      	b.n	80024d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b2:	4a0a      	ldr	r2, [pc, #40]	; (80024dc <SysTick_Config+0x40>)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ba:	210f      	movs	r1, #15
 80024bc:	f04f 30ff 	mov.w	r0, #4294967295
 80024c0:	f7ff ff90 	bl	80023e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c4:	4b05      	ldr	r3, [pc, #20]	; (80024dc <SysTick_Config+0x40>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ca:	4b04      	ldr	r3, [pc, #16]	; (80024dc <SysTick_Config+0x40>)
 80024cc:	2207      	movs	r2, #7
 80024ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	e000e010 	.word	0xe000e010

080024e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ff49 	bl	8002380 <__NVIC_SetPriorityGrouping>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b086      	sub	sp, #24
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002508:	f7ff ff5e 	bl	80023c8 <__NVIC_GetPriorityGrouping>
 800250c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	6978      	ldr	r0, [r7, #20]
 8002514:	f7ff ff90 	bl	8002438 <NVIC_EncodePriority>
 8002518:	4602      	mov	r2, r0
 800251a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff5f 	bl	80023e4 <__NVIC_SetPriority>
}
 8002526:	bf00      	nop
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff ffb0 	bl	800249c <SysTick_Config>
 800253c:	4603      	mov	r3, r0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002548:	b480      	push	{r7}
 800254a:	b08b      	sub	sp, #44	; 0x2c
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002552:	2300      	movs	r3, #0
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002556:	2300      	movs	r3, #0
 8002558:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800255a:	e169      	b.n	8002830 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800255c:	2201      	movs	r2, #1
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	429a      	cmp	r2, r3
 8002576:	f040 8158 	bne.w	800282a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	4a9a      	ldr	r2, [pc, #616]	; (80027e8 <HAL_GPIO_Init+0x2a0>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d05e      	beq.n	8002642 <HAL_GPIO_Init+0xfa>
 8002584:	4a98      	ldr	r2, [pc, #608]	; (80027e8 <HAL_GPIO_Init+0x2a0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d875      	bhi.n	8002676 <HAL_GPIO_Init+0x12e>
 800258a:	4a98      	ldr	r2, [pc, #608]	; (80027ec <HAL_GPIO_Init+0x2a4>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d058      	beq.n	8002642 <HAL_GPIO_Init+0xfa>
 8002590:	4a96      	ldr	r2, [pc, #600]	; (80027ec <HAL_GPIO_Init+0x2a4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d86f      	bhi.n	8002676 <HAL_GPIO_Init+0x12e>
 8002596:	4a96      	ldr	r2, [pc, #600]	; (80027f0 <HAL_GPIO_Init+0x2a8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d052      	beq.n	8002642 <HAL_GPIO_Init+0xfa>
 800259c:	4a94      	ldr	r2, [pc, #592]	; (80027f0 <HAL_GPIO_Init+0x2a8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d869      	bhi.n	8002676 <HAL_GPIO_Init+0x12e>
 80025a2:	4a94      	ldr	r2, [pc, #592]	; (80027f4 <HAL_GPIO_Init+0x2ac>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d04c      	beq.n	8002642 <HAL_GPIO_Init+0xfa>
 80025a8:	4a92      	ldr	r2, [pc, #584]	; (80027f4 <HAL_GPIO_Init+0x2ac>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d863      	bhi.n	8002676 <HAL_GPIO_Init+0x12e>
 80025ae:	4a92      	ldr	r2, [pc, #584]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d046      	beq.n	8002642 <HAL_GPIO_Init+0xfa>
 80025b4:	4a90      	ldr	r2, [pc, #576]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d85d      	bhi.n	8002676 <HAL_GPIO_Init+0x12e>
 80025ba:	2b12      	cmp	r3, #18
 80025bc:	d82a      	bhi.n	8002614 <HAL_GPIO_Init+0xcc>
 80025be:	2b12      	cmp	r3, #18
 80025c0:	d859      	bhi.n	8002676 <HAL_GPIO_Init+0x12e>
 80025c2:	a201      	add	r2, pc, #4	; (adr r2, 80025c8 <HAL_GPIO_Init+0x80>)
 80025c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c8:	08002643 	.word	0x08002643
 80025cc:	0800261d 	.word	0x0800261d
 80025d0:	0800262f 	.word	0x0800262f
 80025d4:	08002671 	.word	0x08002671
 80025d8:	08002677 	.word	0x08002677
 80025dc:	08002677 	.word	0x08002677
 80025e0:	08002677 	.word	0x08002677
 80025e4:	08002677 	.word	0x08002677
 80025e8:	08002677 	.word	0x08002677
 80025ec:	08002677 	.word	0x08002677
 80025f0:	08002677 	.word	0x08002677
 80025f4:	08002677 	.word	0x08002677
 80025f8:	08002677 	.word	0x08002677
 80025fc:	08002677 	.word	0x08002677
 8002600:	08002677 	.word	0x08002677
 8002604:	08002677 	.word	0x08002677
 8002608:	08002677 	.word	0x08002677
 800260c:	08002625 	.word	0x08002625
 8002610:	08002639 	.word	0x08002639
 8002614:	4a79      	ldr	r2, [pc, #484]	; (80027fc <HAL_GPIO_Init+0x2b4>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d013      	beq.n	8002642 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800261a:	e02c      	b.n	8002676 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	623b      	str	r3, [r7, #32]
          break;
 8002622:	e029      	b.n	8002678 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	3304      	adds	r3, #4
 800262a:	623b      	str	r3, [r7, #32]
          break;
 800262c:	e024      	b.n	8002678 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	3308      	adds	r3, #8
 8002634:	623b      	str	r3, [r7, #32]
          break;
 8002636:	e01f      	b.n	8002678 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	330c      	adds	r3, #12
 800263e:	623b      	str	r3, [r7, #32]
          break;
 8002640:	e01a      	b.n	8002678 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d102      	bne.n	8002650 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800264a:	2304      	movs	r3, #4
 800264c:	623b      	str	r3, [r7, #32]
          break;
 800264e:	e013      	b.n	8002678 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d105      	bne.n	8002664 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002658:	2308      	movs	r3, #8
 800265a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69fa      	ldr	r2, [r7, #28]
 8002660:	611a      	str	r2, [r3, #16]
          break;
 8002662:	e009      	b.n	8002678 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002664:	2308      	movs	r3, #8
 8002666:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69fa      	ldr	r2, [r7, #28]
 800266c:	615a      	str	r2, [r3, #20]
          break;
 800266e:	e003      	b.n	8002678 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002670:	2300      	movs	r3, #0
 8002672:	623b      	str	r3, [r7, #32]
          break;
 8002674:	e000      	b.n	8002678 <HAL_GPIO_Init+0x130>
          break;
 8002676:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	2bff      	cmp	r3, #255	; 0xff
 800267c:	d801      	bhi.n	8002682 <HAL_GPIO_Init+0x13a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	e001      	b.n	8002686 <HAL_GPIO_Init+0x13e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3304      	adds	r3, #4
 8002686:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	2bff      	cmp	r3, #255	; 0xff
 800268c:	d802      	bhi.n	8002694 <HAL_GPIO_Init+0x14c>
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	e002      	b.n	800269a <HAL_GPIO_Init+0x152>
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	3b08      	subs	r3, #8
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	210f      	movs	r1, #15
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	fa01 f303 	lsl.w	r3, r1, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	401a      	ands	r2, r3
 80026ac:	6a39      	ldr	r1, [r7, #32]
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	fa01 f303 	lsl.w	r3, r1, r3
 80026b4:	431a      	orrs	r2, r3
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 80b1 	beq.w	800282a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026c8:	4b4d      	ldr	r3, [pc, #308]	; (8002800 <HAL_GPIO_Init+0x2b8>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	4a4c      	ldr	r2, [pc, #304]	; (8002800 <HAL_GPIO_Init+0x2b8>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6193      	str	r3, [r2, #24]
 80026d4:	4b4a      	ldr	r3, [pc, #296]	; (8002800 <HAL_GPIO_Init+0x2b8>)
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026e0:	4a48      	ldr	r2, [pc, #288]	; (8002804 <HAL_GPIO_Init+0x2bc>)
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	089b      	lsrs	r3, r3, #2
 80026e6:	3302      	adds	r3, #2
 80026e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	220f      	movs	r2, #15
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4013      	ands	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a40      	ldr	r2, [pc, #256]	; (8002808 <HAL_GPIO_Init+0x2c0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d013      	beq.n	8002734 <HAL_GPIO_Init+0x1ec>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a3f      	ldr	r2, [pc, #252]	; (800280c <HAL_GPIO_Init+0x2c4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d00d      	beq.n	8002730 <HAL_GPIO_Init+0x1e8>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a3e      	ldr	r2, [pc, #248]	; (8002810 <HAL_GPIO_Init+0x2c8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d007      	beq.n	800272c <HAL_GPIO_Init+0x1e4>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a3d      	ldr	r2, [pc, #244]	; (8002814 <HAL_GPIO_Init+0x2cc>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d101      	bne.n	8002728 <HAL_GPIO_Init+0x1e0>
 8002724:	2303      	movs	r3, #3
 8002726:	e006      	b.n	8002736 <HAL_GPIO_Init+0x1ee>
 8002728:	2304      	movs	r3, #4
 800272a:	e004      	b.n	8002736 <HAL_GPIO_Init+0x1ee>
 800272c:	2302      	movs	r3, #2
 800272e:	e002      	b.n	8002736 <HAL_GPIO_Init+0x1ee>
 8002730:	2301      	movs	r3, #1
 8002732:	e000      	b.n	8002736 <HAL_GPIO_Init+0x1ee>
 8002734:	2300      	movs	r3, #0
 8002736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002738:	f002 0203 	and.w	r2, r2, #3
 800273c:	0092      	lsls	r2, r2, #2
 800273e:	4093      	lsls	r3, r2
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	4313      	orrs	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002746:	492f      	ldr	r1, [pc, #188]	; (8002804 <HAL_GPIO_Init+0x2bc>)
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	089b      	lsrs	r3, r3, #2
 800274c:	3302      	adds	r3, #2
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d006      	beq.n	800276e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002760:	4b2d      	ldr	r3, [pc, #180]	; (8002818 <HAL_GPIO_Init+0x2d0>)
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	492c      	ldr	r1, [pc, #176]	; (8002818 <HAL_GPIO_Init+0x2d0>)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	4313      	orrs	r3, r2
 800276a:	608b      	str	r3, [r1, #8]
 800276c:	e006      	b.n	800277c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800276e:	4b2a      	ldr	r3, [pc, #168]	; (8002818 <HAL_GPIO_Init+0x2d0>)
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	43db      	mvns	r3, r3
 8002776:	4928      	ldr	r1, [pc, #160]	; (8002818 <HAL_GPIO_Init+0x2d0>)
 8002778:	4013      	ands	r3, r2
 800277a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d006      	beq.n	8002796 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002788:	4b23      	ldr	r3, [pc, #140]	; (8002818 <HAL_GPIO_Init+0x2d0>)
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	4922      	ldr	r1, [pc, #136]	; (8002818 <HAL_GPIO_Init+0x2d0>)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	4313      	orrs	r3, r2
 8002792:	60cb      	str	r3, [r1, #12]
 8002794:	e006      	b.n	80027a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002796:	4b20      	ldr	r3, [pc, #128]	; (8002818 <HAL_GPIO_Init+0x2d0>)
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	43db      	mvns	r3, r3
 800279e:	491e      	ldr	r1, [pc, #120]	; (8002818 <HAL_GPIO_Init+0x2d0>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d006      	beq.n	80027be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027b0:	4b19      	ldr	r3, [pc, #100]	; (8002818 <HAL_GPIO_Init+0x2d0>)
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	4918      	ldr	r1, [pc, #96]	; (8002818 <HAL_GPIO_Init+0x2d0>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	604b      	str	r3, [r1, #4]
 80027bc:	e006      	b.n	80027cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027be:	4b16      	ldr	r3, [pc, #88]	; (8002818 <HAL_GPIO_Init+0x2d0>)
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	4914      	ldr	r1, [pc, #80]	; (8002818 <HAL_GPIO_Init+0x2d0>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d021      	beq.n	800281c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027d8:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <HAL_GPIO_Init+0x2d0>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	490e      	ldr	r1, [pc, #56]	; (8002818 <HAL_GPIO_Init+0x2d0>)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	600b      	str	r3, [r1, #0]
 80027e4:	e021      	b.n	800282a <HAL_GPIO_Init+0x2e2>
 80027e6:	bf00      	nop
 80027e8:	10320000 	.word	0x10320000
 80027ec:	10310000 	.word	0x10310000
 80027f0:	10220000 	.word	0x10220000
 80027f4:	10210000 	.word	0x10210000
 80027f8:	10120000 	.word	0x10120000
 80027fc:	10110000 	.word	0x10110000
 8002800:	40021000 	.word	0x40021000
 8002804:	40010000 	.word	0x40010000
 8002808:	40010800 	.word	0x40010800
 800280c:	40010c00 	.word	0x40010c00
 8002810:	40011000 	.word	0x40011000
 8002814:	40011400 	.word	0x40011400
 8002818:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_GPIO_Init+0x304>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	43db      	mvns	r3, r3
 8002824:	4909      	ldr	r1, [pc, #36]	; (800284c <HAL_GPIO_Init+0x304>)
 8002826:	4013      	ands	r3, r2
 8002828:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	3301      	adds	r3, #1
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	fa22 f303 	lsr.w	r3, r2, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	f47f ae8e 	bne.w	800255c <HAL_GPIO_Init+0x14>
  }
}
 8002840:	bf00      	nop
 8002842:	bf00      	nop
 8002844:	372c      	adds	r7, #44	; 0x2c
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr
 800284c:	40010400 	.word	0x40010400

08002850 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	887b      	ldrh	r3, [r7, #2]
 8002862:	4013      	ands	r3, r2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002868:	2301      	movs	r3, #1
 800286a:	73fb      	strb	r3, [r7, #15]
 800286c:	e001      	b.n	8002872 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800286e:	2300      	movs	r3, #0
 8002870:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002872:	7bfb      	ldrb	r3, [r7, #15]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	460b      	mov	r3, r1
 8002888:	807b      	strh	r3, [r7, #2]
 800288a:	4613      	mov	r3, r2
 800288c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800288e:	787b      	ldrb	r3, [r7, #1]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002894:	887a      	ldrh	r2, [r7, #2]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800289a:	e003      	b.n	80028a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800289c:	887b      	ldrh	r3, [r7, #2]
 800289e:	041a      	lsls	r2, r3, #16
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	611a      	str	r2, [r3, #16]
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr
	...

080028b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e272      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 8087 	beq.w	80029de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028d0:	4b92      	ldr	r3, [pc, #584]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 030c 	and.w	r3, r3, #12
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d00c      	beq.n	80028f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028dc:	4b8f      	ldr	r3, [pc, #572]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 030c 	and.w	r3, r3, #12
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d112      	bne.n	800290e <HAL_RCC_OscConfig+0x5e>
 80028e8:	4b8c      	ldr	r3, [pc, #560]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f4:	d10b      	bne.n	800290e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f6:	4b89      	ldr	r3, [pc, #548]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d06c      	beq.n	80029dc <HAL_RCC_OscConfig+0x12c>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d168      	bne.n	80029dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e24c      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002916:	d106      	bne.n	8002926 <HAL_RCC_OscConfig+0x76>
 8002918:	4b80      	ldr	r3, [pc, #512]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a7f      	ldr	r2, [pc, #508]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 800291e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	e02e      	b.n	8002984 <HAL_RCC_OscConfig+0xd4>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10c      	bne.n	8002948 <HAL_RCC_OscConfig+0x98>
 800292e:	4b7b      	ldr	r3, [pc, #492]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a7a      	ldr	r2, [pc, #488]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	4b78      	ldr	r3, [pc, #480]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a77      	ldr	r2, [pc, #476]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002940:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	e01d      	b.n	8002984 <HAL_RCC_OscConfig+0xd4>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002950:	d10c      	bne.n	800296c <HAL_RCC_OscConfig+0xbc>
 8002952:	4b72      	ldr	r3, [pc, #456]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a71      	ldr	r2, [pc, #452]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	4b6f      	ldr	r3, [pc, #444]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a6e      	ldr	r2, [pc, #440]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	e00b      	b.n	8002984 <HAL_RCC_OscConfig+0xd4>
 800296c:	4b6b      	ldr	r3, [pc, #428]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a6a      	ldr	r2, [pc, #424]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	4b68      	ldr	r3, [pc, #416]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a67      	ldr	r2, [pc, #412]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 800297e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002982:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d013      	beq.n	80029b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7ff f872 	bl	8001a74 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002994:	f7ff f86e 	bl	8001a74 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b64      	cmp	r3, #100	; 0x64
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e200      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a6:	4b5d      	ldr	r3, [pc, #372]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0xe4>
 80029b2:	e014      	b.n	80029de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7ff f85e 	bl	8001a74 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029bc:	f7ff f85a 	bl	8001a74 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b64      	cmp	r3, #100	; 0x64
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e1ec      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ce:	4b53      	ldr	r3, [pc, #332]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x10c>
 80029da:	e000      	b.n	80029de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d063      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ea:	4b4c      	ldr	r3, [pc, #304]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00b      	beq.n	8002a0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029f6:	4b49      	ldr	r3, [pc, #292]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d11c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x18c>
 8002a02:	4b46      	ldr	r3, [pc, #280]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d116      	bne.n	8002a3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0e:	4b43      	ldr	r3, [pc, #268]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d005      	beq.n	8002a26 <HAL_RCC_OscConfig+0x176>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d001      	beq.n	8002a26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e1c0      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a26:	4b3d      	ldr	r3, [pc, #244]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4939      	ldr	r1, [pc, #228]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3a:	e03a      	b.n	8002ab2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d020      	beq.n	8002a86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a44:	4b36      	ldr	r3, [pc, #216]	; (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4a:	f7ff f813 	bl	8001a74 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a52:	f7ff f80f 	bl	8001a74 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e1a1      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a64:	4b2d      	ldr	r3, [pc, #180]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a70:	4b2a      	ldr	r3, [pc, #168]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4927      	ldr	r1, [pc, #156]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	600b      	str	r3, [r1, #0]
 8002a84:	e015      	b.n	8002ab2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a86:	4b26      	ldr	r3, [pc, #152]	; (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7fe fff2 	bl	8001a74 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a94:	f7fe ffee 	bl	8001a74 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e180      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa6:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d03a      	beq.n	8002b34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d019      	beq.n	8002afa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ac6:	4b17      	ldr	r3, [pc, #92]	; (8002b24 <HAL_RCC_OscConfig+0x274>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002acc:	f7fe ffd2 	bl	8001a74 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ad4:	f7fe ffce 	bl	8001a74 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e160      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002af2:	2001      	movs	r0, #1
 8002af4:	f000 faba 	bl	800306c <RCC_Delay>
 8002af8:	e01c      	b.n	8002b34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002afa:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <HAL_RCC_OscConfig+0x274>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b00:	f7fe ffb8 	bl	8001a74 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b06:	e00f      	b.n	8002b28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b08:	f7fe ffb4 	bl	8001a74 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d908      	bls.n	8002b28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e146      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	42420000 	.word	0x42420000
 8002b24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b28:	4b92      	ldr	r3, [pc, #584]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1e9      	bne.n	8002b08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80a6 	beq.w	8002c8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b42:	2300      	movs	r3, #0
 8002b44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b46:	4b8b      	ldr	r3, [pc, #556]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10d      	bne.n	8002b6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b52:	4b88      	ldr	r3, [pc, #544]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	4a87      	ldr	r2, [pc, #540]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	61d3      	str	r3, [r2, #28]
 8002b5e:	4b85      	ldr	r3, [pc, #532]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6e:	4b82      	ldr	r3, [pc, #520]	; (8002d78 <HAL_RCC_OscConfig+0x4c8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d118      	bne.n	8002bac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b7a:	4b7f      	ldr	r3, [pc, #508]	; (8002d78 <HAL_RCC_OscConfig+0x4c8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a7e      	ldr	r2, [pc, #504]	; (8002d78 <HAL_RCC_OscConfig+0x4c8>)
 8002b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b86:	f7fe ff75 	bl	8001a74 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8e:	f7fe ff71 	bl	8001a74 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b64      	cmp	r3, #100	; 0x64
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e103      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba0:	4b75      	ldr	r3, [pc, #468]	; (8002d78 <HAL_RCC_OscConfig+0x4c8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0f0      	beq.n	8002b8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d106      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x312>
 8002bb4:	4b6f      	ldr	r3, [pc, #444]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	4a6e      	ldr	r2, [pc, #440]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	6213      	str	r3, [r2, #32]
 8002bc0:	e02d      	b.n	8002c1e <HAL_RCC_OscConfig+0x36e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10c      	bne.n	8002be4 <HAL_RCC_OscConfig+0x334>
 8002bca:	4b6a      	ldr	r3, [pc, #424]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	4a69      	ldr	r2, [pc, #420]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bd0:	f023 0301 	bic.w	r3, r3, #1
 8002bd4:	6213      	str	r3, [r2, #32]
 8002bd6:	4b67      	ldr	r3, [pc, #412]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	4a66      	ldr	r2, [pc, #408]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	f023 0304 	bic.w	r3, r3, #4
 8002be0:	6213      	str	r3, [r2, #32]
 8002be2:	e01c      	b.n	8002c1e <HAL_RCC_OscConfig+0x36e>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	2b05      	cmp	r3, #5
 8002bea:	d10c      	bne.n	8002c06 <HAL_RCC_OscConfig+0x356>
 8002bec:	4b61      	ldr	r3, [pc, #388]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	4a60      	ldr	r2, [pc, #384]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bf2:	f043 0304 	orr.w	r3, r3, #4
 8002bf6:	6213      	str	r3, [r2, #32]
 8002bf8:	4b5e      	ldr	r3, [pc, #376]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	4a5d      	ldr	r2, [pc, #372]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	6213      	str	r3, [r2, #32]
 8002c04:	e00b      	b.n	8002c1e <HAL_RCC_OscConfig+0x36e>
 8002c06:	4b5b      	ldr	r3, [pc, #364]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	4a5a      	ldr	r2, [pc, #360]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002c0c:	f023 0301 	bic.w	r3, r3, #1
 8002c10:	6213      	str	r3, [r2, #32]
 8002c12:	4b58      	ldr	r3, [pc, #352]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	4a57      	ldr	r2, [pc, #348]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002c18:	f023 0304 	bic.w	r3, r3, #4
 8002c1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d015      	beq.n	8002c52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c26:	f7fe ff25 	bl	8001a74 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2c:	e00a      	b.n	8002c44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2e:	f7fe ff21 	bl	8001a74 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e0b1      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c44:	4b4b      	ldr	r3, [pc, #300]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0ee      	beq.n	8002c2e <HAL_RCC_OscConfig+0x37e>
 8002c50:	e014      	b.n	8002c7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c52:	f7fe ff0f 	bl	8001a74 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c58:	e00a      	b.n	8002c70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5a:	f7fe ff0b 	bl	8001a74 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e09b      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c70:	4b40      	ldr	r3, [pc, #256]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1ee      	bne.n	8002c5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c7c:	7dfb      	ldrb	r3, [r7, #23]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d105      	bne.n	8002c8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c82:	4b3c      	ldr	r3, [pc, #240]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	4a3b      	ldr	r2, [pc, #236]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 8087 	beq.w	8002da6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c98:	4b36      	ldr	r3, [pc, #216]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 030c 	and.w	r3, r3, #12
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d061      	beq.n	8002d68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d146      	bne.n	8002d3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cac:	4b33      	ldr	r3, [pc, #204]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb2:	f7fe fedf 	bl	8001a74 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cba:	f7fe fedb 	bl	8001a74 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e06d      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ccc:	4b29      	ldr	r3, [pc, #164]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1f0      	bne.n	8002cba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce0:	d108      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ce2:	4b24      	ldr	r3, [pc, #144]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	4921      	ldr	r1, [pc, #132]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cf4:	4b1f      	ldr	r3, [pc, #124]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a19      	ldr	r1, [r3, #32]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	430b      	orrs	r3, r1
 8002d06:	491b      	ldr	r1, [pc, #108]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d0c:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002d0e:	2201      	movs	r2, #1
 8002d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d12:	f7fe feaf 	bl	8001a74 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1a:	f7fe feab 	bl	8001a74 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e03d      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d2c:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0f0      	beq.n	8002d1a <HAL_RCC_OscConfig+0x46a>
 8002d38:	e035      	b.n	8002da6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3a:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d40:	f7fe fe98 	bl	8001a74 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d48:	f7fe fe94 	bl	8001a74 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e026      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d5a:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f0      	bne.n	8002d48 <HAL_RCC_OscConfig+0x498>
 8002d66:	e01e      	b.n	8002da6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d107      	bne.n	8002d80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e019      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40007000 	.word	0x40007000
 8002d7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <HAL_RCC_OscConfig+0x500>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d106      	bne.n	8002da2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d001      	beq.n	8002da6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3718      	adds	r7, #24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40021000 	.word	0x40021000

08002db4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0d0      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc8:	4b6a      	ldr	r3, [pc, #424]	; (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d910      	bls.n	8002df8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd6:	4b67      	ldr	r3, [pc, #412]	; (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f023 0207 	bic.w	r2, r3, #7
 8002dde:	4965      	ldr	r1, [pc, #404]	; (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de6:	4b63      	ldr	r3, [pc, #396]	; (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d001      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e0b8      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d020      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e10:	4b59      	ldr	r3, [pc, #356]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	4a58      	ldr	r2, [pc, #352]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0308 	and.w	r3, r3, #8
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e28:	4b53      	ldr	r3, [pc, #332]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4a52      	ldr	r2, [pc, #328]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e34:	4b50      	ldr	r3, [pc, #320]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	494d      	ldr	r1, [pc, #308]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d040      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d107      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5a:	4b47      	ldr	r3, [pc, #284]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d115      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e07f      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d107      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e72:	4b41      	ldr	r3, [pc, #260]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d109      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e073      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e82:	4b3d      	ldr	r3, [pc, #244]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e06b      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e92:	4b39      	ldr	r3, [pc, #228]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f023 0203 	bic.w	r2, r3, #3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	4936      	ldr	r1, [pc, #216]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ea4:	f7fe fde6 	bl	8001a74 <HAL_GetTick>
 8002ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eaa:	e00a      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eac:	f7fe fde2 	bl	8001a74 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e053      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec2:	4b2d      	ldr	r3, [pc, #180]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f003 020c 	and.w	r2, r3, #12
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d1eb      	bne.n	8002eac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed4:	4b27      	ldr	r3, [pc, #156]	; (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d210      	bcs.n	8002f04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee2:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f023 0207 	bic.w	r2, r3, #7
 8002eea:	4922      	ldr	r1, [pc, #136]	; (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef2:	4b20      	ldr	r3, [pc, #128]	; (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d001      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e032      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d008      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f10:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	4916      	ldr	r1, [pc, #88]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d009      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f2e:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	490e      	ldr	r1, [pc, #56]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f42:	f000 f821 	bl	8002f88 <HAL_RCC_GetSysClockFreq>
 8002f46:	4602      	mov	r2, r0
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	091b      	lsrs	r3, r3, #4
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	490a      	ldr	r1, [pc, #40]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002f54:	5ccb      	ldrb	r3, [r1, r3]
 8002f56:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5a:	4a09      	ldr	r2, [pc, #36]	; (8002f80 <HAL_RCC_ClockConfig+0x1cc>)
 8002f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f5e:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <HAL_RCC_ClockConfig+0x1d0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fe fd44 	bl	80019f0 <HAL_InitTick>

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40022000 	.word	0x40022000
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	080041f0 	.word	0x080041f0
 8002f80:	20000014 	.word	0x20000014
 8002f84:	20000018 	.word	0x20000018

08002f88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fa2:	4b1e      	ldr	r3, [pc, #120]	; (800301c <HAL_RCC_GetSysClockFreq+0x94>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 030c 	and.w	r3, r3, #12
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d002      	beq.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x30>
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d003      	beq.n	8002fbe <HAL_RCC_GetSysClockFreq+0x36>
 8002fb6:	e027      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fb8:	4b19      	ldr	r3, [pc, #100]	; (8003020 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fba:	613b      	str	r3, [r7, #16]
      break;
 8002fbc:	e027      	b.n	800300e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	0c9b      	lsrs	r3, r3, #18
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	4a17      	ldr	r2, [pc, #92]	; (8003024 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fc8:	5cd3      	ldrb	r3, [r2, r3]
 8002fca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d010      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fd6:	4b11      	ldr	r3, [pc, #68]	; (800301c <HAL_RCC_GetSysClockFreq+0x94>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	0c5b      	lsrs	r3, r3, #17
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	4a11      	ldr	r2, [pc, #68]	; (8003028 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002fe2:	5cd3      	ldrb	r3, [r2, r3]
 8002fe4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a0d      	ldr	r2, [pc, #52]	; (8003020 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fea:	fb03 f202 	mul.w	r2, r3, r2
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	e004      	b.n	8003002 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a0c      	ldr	r2, [pc, #48]	; (800302c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ffc:	fb02 f303 	mul.w	r3, r2, r3
 8003000:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	613b      	str	r3, [r7, #16]
      break;
 8003006:	e002      	b.n	800300e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003008:	4b05      	ldr	r3, [pc, #20]	; (8003020 <HAL_RCC_GetSysClockFreq+0x98>)
 800300a:	613b      	str	r3, [r7, #16]
      break;
 800300c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800300e:	693b      	ldr	r3, [r7, #16]
}
 8003010:	4618      	mov	r0, r3
 8003012:	371c      	adds	r7, #28
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40021000 	.word	0x40021000
 8003020:	007a1200 	.word	0x007a1200
 8003024:	08004208 	.word	0x08004208
 8003028:	08004218 	.word	0x08004218
 800302c:	003d0900 	.word	0x003d0900

08003030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003034:	4b02      	ldr	r3, [pc, #8]	; (8003040 <HAL_RCC_GetHCLKFreq+0x10>)
 8003036:	681b      	ldr	r3, [r3, #0]
}
 8003038:	4618      	mov	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr
 8003040:	20000014 	.word	0x20000014

08003044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003048:	f7ff fff2 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 800304c:	4602      	mov	r2, r0
 800304e:	4b05      	ldr	r3, [pc, #20]	; (8003064 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	0adb      	lsrs	r3, r3, #11
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	4903      	ldr	r1, [pc, #12]	; (8003068 <HAL_RCC_GetPCLK2Freq+0x24>)
 800305a:	5ccb      	ldrb	r3, [r1, r3]
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003060:	4618      	mov	r0, r3
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40021000 	.word	0x40021000
 8003068:	08004200 	.word	0x08004200

0800306c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003074:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <RCC_Delay+0x34>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a0a      	ldr	r2, [pc, #40]	; (80030a4 <RCC_Delay+0x38>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	0a5b      	lsrs	r3, r3, #9
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	fb02 f303 	mul.w	r3, r2, r3
 8003086:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003088:	bf00      	nop
  }
  while (Delay --);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	1e5a      	subs	r2, r3, #1
 800308e:	60fa      	str	r2, [r7, #12]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1f9      	bne.n	8003088 <RCC_Delay+0x1c>
}
 8003094:	bf00      	nop
 8003096:	bf00      	nop
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr
 80030a0:	20000014 	.word	0x20000014
 80030a4:	10624dd3 	.word	0x10624dd3

080030a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	2300      	movs	r3, #0
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d07d      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80030c4:	2300      	movs	r3, #0
 80030c6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030c8:	4b4f      	ldr	r3, [pc, #316]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10d      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d4:	4b4c      	ldr	r3, [pc, #304]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	4a4b      	ldr	r2, [pc, #300]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030de:	61d3      	str	r3, [r2, #28]
 80030e0:	4b49      	ldr	r3, [pc, #292]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ec:	2301      	movs	r3, #1
 80030ee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f0:	4b46      	ldr	r3, [pc, #280]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d118      	bne.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030fc:	4b43      	ldr	r3, [pc, #268]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a42      	ldr	r2, [pc, #264]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003106:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003108:	f7fe fcb4 	bl	8001a74 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310e:	e008      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003110:	f7fe fcb0 	bl	8001a74 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	; 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e06d      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003122:	4b3a      	ldr	r3, [pc, #232]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800312e:	4b36      	ldr	r3, [pc, #216]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003136:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d02e      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	429a      	cmp	r2, r3
 800314a:	d027      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800314c:	4b2e      	ldr	r3, [pc, #184]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003154:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003156:	4b2e      	ldr	r3, [pc, #184]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003158:	2201      	movs	r2, #1
 800315a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800315c:	4b2c      	ldr	r3, [pc, #176]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003162:	4a29      	ldr	r2, [pc, #164]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d014      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003172:	f7fe fc7f 	bl	8001a74 <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003178:	e00a      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317a:	f7fe fc7b 	bl	8001a74 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	f241 3288 	movw	r2, #5000	; 0x1388
 8003188:	4293      	cmp	r3, r2
 800318a:	d901      	bls.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e036      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003190:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0ee      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800319c:	4b1a      	ldr	r3, [pc, #104]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	4917      	ldr	r1, [pc, #92]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031ae:	7dfb      	ldrb	r3, [r7, #23]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d105      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031b4:	4b14      	ldr	r3, [pc, #80]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	4a13      	ldr	r2, [pc, #76]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d008      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031cc:	4b0e      	ldr	r3, [pc, #56]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	490b      	ldr	r1, [pc, #44]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0310 	and.w	r3, r3, #16
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d008      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031ea:	4b07      	ldr	r3, [pc, #28]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	4904      	ldr	r1, [pc, #16]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40021000 	.word	0x40021000
 800320c:	40007000 	.word	0x40007000
 8003210:	42420440 	.word	0x42420440

08003214 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	2300      	movs	r3, #0
 8003222:	61fb      	str	r3, [r7, #28]
 8003224:	2300      	movs	r3, #0
 8003226:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	2300      	movs	r3, #0
 800322e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b10      	cmp	r3, #16
 8003234:	d00a      	beq.n	800324c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b10      	cmp	r3, #16
 800323a:	f200 808a 	bhi.w	8003352 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d045      	beq.n	80032d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d075      	beq.n	8003336 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800324a:	e082      	b.n	8003352 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800324c:	4b46      	ldr	r3, [pc, #280]	; (8003368 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003252:	4b45      	ldr	r3, [pc, #276]	; (8003368 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d07b      	beq.n	8003356 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	0c9b      	lsrs	r3, r3, #18
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	4a41      	ldr	r2, [pc, #260]	; (800336c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003268:	5cd3      	ldrb	r3, [r2, r3]
 800326a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d015      	beq.n	80032a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003276:	4b3c      	ldr	r3, [pc, #240]	; (8003368 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	0c5b      	lsrs	r3, r3, #17
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	4a3b      	ldr	r2, [pc, #236]	; (8003370 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003282:	5cd3      	ldrb	r3, [r2, r3]
 8003284:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00d      	beq.n	80032ac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003290:	4a38      	ldr	r2, [pc, #224]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	fbb2 f2f3 	udiv	r2, r2, r3
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	fb02 f303 	mul.w	r3, r2, r3
 800329e:	61fb      	str	r3, [r7, #28]
 80032a0:	e004      	b.n	80032ac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4a34      	ldr	r2, [pc, #208]	; (8003378 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80032a6:	fb02 f303 	mul.w	r3, r2, r3
 80032aa:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80032ac:	4b2e      	ldr	r3, [pc, #184]	; (8003368 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032b8:	d102      	bne.n	80032c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	61bb      	str	r3, [r7, #24]
      break;
 80032be:	e04a      	b.n	8003356 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	4a2d      	ldr	r2, [pc, #180]	; (800337c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80032c6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ca:	085b      	lsrs	r3, r3, #1
 80032cc:	61bb      	str	r3, [r7, #24]
      break;
 80032ce:	e042      	b.n	8003356 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80032d0:	4b25      	ldr	r3, [pc, #148]	; (8003368 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032e0:	d108      	bne.n	80032f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80032ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032f0:	61bb      	str	r3, [r7, #24]
 80032f2:	e01f      	b.n	8003334 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032fe:	d109      	bne.n	8003314 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003300:	4b19      	ldr	r3, [pc, #100]	; (8003368 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800330c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003310:	61bb      	str	r3, [r7, #24]
 8003312:	e00f      	b.n	8003334 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800331e:	d11c      	bne.n	800335a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d016      	beq.n	800335a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800332c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003330:	61bb      	str	r3, [r7, #24]
      break;
 8003332:	e012      	b.n	800335a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003334:	e011      	b.n	800335a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003336:	f7ff fe85 	bl	8003044 <HAL_RCC_GetPCLK2Freq>
 800333a:	4602      	mov	r2, r0
 800333c:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	0b9b      	lsrs	r3, r3, #14
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	3301      	adds	r3, #1
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	fbb2 f3f3 	udiv	r3, r2, r3
 800334e:	61bb      	str	r3, [r7, #24]
      break;
 8003350:	e004      	b.n	800335c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003352:	bf00      	nop
 8003354:	e002      	b.n	800335c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003356:	bf00      	nop
 8003358:	e000      	b.n	800335c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800335a:	bf00      	nop
    }
  }
  return (frequency);
 800335c:	69bb      	ldr	r3, [r7, #24]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3720      	adds	r7, #32
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40021000 	.word	0x40021000
 800336c:	0800421c 	.word	0x0800421c
 8003370:	0800422c 	.word	0x0800422c
 8003374:	007a1200 	.word	0x007a1200
 8003378:	003d0900 	.word	0x003d0900
 800337c:	aaaaaaab 	.word	0xaaaaaaab

08003380 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e076      	b.n	8003480 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	2b00      	cmp	r3, #0
 8003398:	d108      	bne.n	80033ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033a2:	d009      	beq.n	80033b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	61da      	str	r2, [r3, #28]
 80033aa:	e005      	b.n	80033b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d106      	bne.n	80033d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fe fa26 	bl	8001824 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003428:	431a      	orrs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343c:	ea42 0103 	orr.w	r1, r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	0c1a      	lsrs	r2, r3, #16
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f002 0204 	and.w	r2, r2, #4
 800345e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	69da      	ldr	r2, [r3, #28]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800346e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	4613      	mov	r3, r2
 8003496:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d101      	bne.n	80034aa <HAL_SPI_Transmit+0x22>
 80034a6:	2302      	movs	r3, #2
 80034a8:	e12d      	b.n	8003706 <HAL_SPI_Transmit+0x27e>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034b2:	f7fe fadf 	bl	8001a74 <HAL_GetTick>
 80034b6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80034b8:	88fb      	ldrh	r3, [r7, #6]
 80034ba:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d002      	beq.n	80034ce <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80034c8:	2302      	movs	r3, #2
 80034ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034cc:	e116      	b.n	80036fc <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d002      	beq.n	80034da <HAL_SPI_Transmit+0x52>
 80034d4:	88fb      	ldrh	r3, [r7, #6]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d102      	bne.n	80034e0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034de:	e10d      	b.n	80036fc <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2203      	movs	r2, #3
 80034e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	88fa      	ldrh	r2, [r7, #6]
 80034f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	88fa      	ldrh	r2, [r7, #6]
 80034fe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003526:	d10f      	bne.n	8003548 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003536:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003546:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003552:	2b40      	cmp	r3, #64	; 0x40
 8003554:	d007      	beq.n	8003566 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003564:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800356e:	d14f      	bne.n	8003610 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <HAL_SPI_Transmit+0xf6>
 8003578:	8afb      	ldrh	r3, [r7, #22]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d142      	bne.n	8003604 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003582:	881a      	ldrh	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	1c9a      	adds	r2, r3, #2
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80035a2:	e02f      	b.n	8003604 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d112      	bne.n	80035d8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	881a      	ldrh	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	1c9a      	adds	r2, r3, #2
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	86da      	strh	r2, [r3, #54]	; 0x36
 80035d6:	e015      	b.n	8003604 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035d8:	f7fe fa4c 	bl	8001a74 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d803      	bhi.n	80035f0 <HAL_SPI_Transmit+0x168>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ee:	d102      	bne.n	80035f6 <HAL_SPI_Transmit+0x16e>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d106      	bne.n	8003604 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003602:	e07b      	b.n	80036fc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003608:	b29b      	uxth	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1ca      	bne.n	80035a4 <HAL_SPI_Transmit+0x11c>
 800360e:	e050      	b.n	80036b2 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <HAL_SPI_Transmit+0x196>
 8003618:	8afb      	ldrh	r3, [r7, #22]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d144      	bne.n	80036a8 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	330c      	adds	r3, #12
 8003628:	7812      	ldrb	r2, [r2, #0]
 800362a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800363a:	b29b      	uxth	r3, r3
 800363c:	3b01      	subs	r3, #1
 800363e:	b29a      	uxth	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003644:	e030      	b.n	80036a8 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b02      	cmp	r3, #2
 8003652:	d113      	bne.n	800367c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	330c      	adds	r3, #12
 800365e:	7812      	ldrb	r2, [r2, #0]
 8003660:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003670:	b29b      	uxth	r3, r3
 8003672:	3b01      	subs	r3, #1
 8003674:	b29a      	uxth	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	86da      	strh	r2, [r3, #54]	; 0x36
 800367a:	e015      	b.n	80036a8 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800367c:	f7fe f9fa 	bl	8001a74 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d803      	bhi.n	8003694 <HAL_SPI_Transmit+0x20c>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003692:	d102      	bne.n	800369a <HAL_SPI_Transmit+0x212>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d106      	bne.n	80036a8 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80036a6:	e029      	b.n	80036fc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1c9      	bne.n	8003646 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	6839      	ldr	r1, [r7, #0]
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 fa6e 	bl	8003b98 <SPI_EndRxTxTransaction>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2220      	movs	r2, #32
 80036c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10a      	bne.n	80036e6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036d0:	2300      	movs	r3, #0
 80036d2:	613b      	str	r3, [r7, #16]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	613b      	str	r3, [r7, #16]
 80036e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	77fb      	strb	r3, [r7, #31]
 80036f2:	e003      	b.n	80036fc <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003704:	7ffb      	ldrb	r3, [r7, #31]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3720      	adds	r7, #32
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b08c      	sub	sp, #48	; 0x30
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800371c:	2301      	movs	r3, #1
 800371e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_SPI_TransmitReceive+0x26>
 8003730:	2302      	movs	r3, #2
 8003732:	e198      	b.n	8003a66 <HAL_SPI_TransmitReceive+0x358>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800373c:	f7fe f99a 	bl	8001a74 <HAL_GetTick>
 8003740:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003748:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003752:	887b      	ldrh	r3, [r7, #2]
 8003754:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003756:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800375a:	2b01      	cmp	r3, #1
 800375c:	d00f      	beq.n	800377e <HAL_SPI_TransmitReceive+0x70>
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003764:	d107      	bne.n	8003776 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d103      	bne.n	8003776 <HAL_SPI_TransmitReceive+0x68>
 800376e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003772:	2b04      	cmp	r3, #4
 8003774:	d003      	beq.n	800377e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003776:	2302      	movs	r3, #2
 8003778:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800377c:	e16d      	b.n	8003a5a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <HAL_SPI_TransmitReceive+0x82>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d002      	beq.n	8003790 <HAL_SPI_TransmitReceive+0x82>
 800378a:	887b      	ldrh	r3, [r7, #2]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d103      	bne.n	8003798 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003796:	e160      	b.n	8003a5a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d003      	beq.n	80037ac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2205      	movs	r2, #5
 80037a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	887a      	ldrh	r2, [r7, #2]
 80037bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	887a      	ldrh	r2, [r7, #2]
 80037c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	887a      	ldrh	r2, [r7, #2]
 80037ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	887a      	ldrh	r2, [r7, #2]
 80037d4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ec:	2b40      	cmp	r3, #64	; 0x40
 80037ee:	d007      	beq.n	8003800 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003808:	d17c      	bne.n	8003904 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <HAL_SPI_TransmitReceive+0x10a>
 8003812:	8b7b      	ldrh	r3, [r7, #26]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d16a      	bne.n	80038ee <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381c:	881a      	ldrh	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003828:	1c9a      	adds	r2, r3, #2
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003832:	b29b      	uxth	r3, r3
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800383c:	e057      	b.n	80038ee <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b02      	cmp	r3, #2
 800384a:	d11b      	bne.n	8003884 <HAL_SPI_TransmitReceive+0x176>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003850:	b29b      	uxth	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d016      	beq.n	8003884 <HAL_SPI_TransmitReceive+0x176>
 8003856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003858:	2b01      	cmp	r3, #1
 800385a:	d113      	bne.n	8003884 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	881a      	ldrh	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386c:	1c9a      	adds	r2, r3, #2
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003876:	b29b      	uxth	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b01      	cmp	r3, #1
 8003890:	d119      	bne.n	80038c6 <HAL_SPI_TransmitReceive+0x1b8>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003896:	b29b      	uxth	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d014      	beq.n	80038c6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	b292      	uxth	r2, r2
 80038a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	1c9a      	adds	r2, r3, #2
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038c2:	2301      	movs	r3, #1
 80038c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038c6:	f7fe f8d5 	bl	8001a74 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d80b      	bhi.n	80038ee <HAL_SPI_TransmitReceive+0x1e0>
 80038d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038dc:	d007      	beq.n	80038ee <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80038ec:	e0b5      	b.n	8003a5a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1a2      	bne.n	800383e <HAL_SPI_TransmitReceive+0x130>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d19d      	bne.n	800383e <HAL_SPI_TransmitReceive+0x130>
 8003902:	e080      	b.n	8003a06 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <HAL_SPI_TransmitReceive+0x204>
 800390c:	8b7b      	ldrh	r3, [r7, #26]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d16f      	bne.n	80039f2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	330c      	adds	r3, #12
 800391c:	7812      	ldrb	r2, [r2, #0]
 800391e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800392e:	b29b      	uxth	r3, r3
 8003930:	3b01      	subs	r3, #1
 8003932:	b29a      	uxth	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003938:	e05b      	b.n	80039f2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b02      	cmp	r3, #2
 8003946:	d11c      	bne.n	8003982 <HAL_SPI_TransmitReceive+0x274>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d017      	beq.n	8003982 <HAL_SPI_TransmitReceive+0x274>
 8003952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003954:	2b01      	cmp	r3, #1
 8003956:	d114      	bne.n	8003982 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	330c      	adds	r3, #12
 8003962:	7812      	ldrb	r2, [r2, #0]
 8003964:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800397e:	2300      	movs	r3, #0
 8003980:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b01      	cmp	r3, #1
 800398e:	d119      	bne.n	80039c4 <HAL_SPI_TransmitReceive+0x2b6>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d014      	beq.n	80039c4 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039c0:	2301      	movs	r3, #1
 80039c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039c4:	f7fe f856 	bl	8001a74 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d803      	bhi.n	80039dc <HAL_SPI_TransmitReceive+0x2ce>
 80039d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039da:	d102      	bne.n	80039e2 <HAL_SPI_TransmitReceive+0x2d4>
 80039dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d107      	bne.n	80039f2 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80039f0:	e033      	b.n	8003a5a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d19e      	bne.n	800393a <HAL_SPI_TransmitReceive+0x22c>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d199      	bne.n	800393a <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f8c4 	bl	8003b98 <SPI_EndRxTxTransaction>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d006      	beq.n	8003a24 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a22:	e01a      	b.n	8003a5a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10a      	bne.n	8003a42 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a50:	e003      	b.n	8003a5a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3730      	adds	r7, #48	; 0x30
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a7c:	b2db      	uxtb	r3, r3
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr

08003a88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	4613      	mov	r3, r2
 8003a96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a98:	f7fd ffec 	bl	8001a74 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003aa8:	f7fd ffe4 	bl	8001a74 <HAL_GetTick>
 8003aac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003aae:	4b39      	ldr	r3, [pc, #228]	; (8003b94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	015b      	lsls	r3, r3, #5
 8003ab4:	0d1b      	lsrs	r3, r3, #20
 8003ab6:	69fa      	ldr	r2, [r7, #28]
 8003ab8:	fb02 f303 	mul.w	r3, r2, r3
 8003abc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003abe:	e054      	b.n	8003b6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac6:	d050      	beq.n	8003b6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ac8:	f7fd ffd4 	bl	8001a74 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	69fa      	ldr	r2, [r7, #28]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d902      	bls.n	8003ade <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d13d      	bne.n	8003b5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003aec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003af6:	d111      	bne.n	8003b1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b00:	d004      	beq.n	8003b0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b0a:	d107      	bne.n	8003b1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b24:	d10f      	bne.n	8003b46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e017      	b.n	8003b8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	4013      	ands	r3, r2
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	bf0c      	ite	eq
 8003b7a:	2301      	moveq	r3, #1
 8003b7c:	2300      	movne	r3, #0
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	461a      	mov	r2, r3
 8003b82:	79fb      	ldrb	r3, [r7, #7]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d19b      	bne.n	8003ac0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3720      	adds	r7, #32
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20000014 	.word	0x20000014

08003b98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2200      	movs	r2, #0
 8003bac:	2180      	movs	r1, #128	; 0x80
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f7ff ff6a 	bl	8003a88 <SPI_WaitFlagStateUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d007      	beq.n	8003bca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbe:	f043 0220 	orr.w	r2, r3, #32
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e000      	b.n	8003bcc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e041      	b.n	8003c6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d106      	bne.n	8003c00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7fd fe5c 	bl	80018b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	4619      	mov	r1, r3
 8003c12:	4610      	mov	r0, r2
 8003c14:	f000 f940 	bl	8003e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d001      	beq.n	8003c8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e032      	b.n	8003cf2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a18      	ldr	r2, [pc, #96]	; (8003cfc <HAL_TIM_Base_Start+0x88>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00e      	beq.n	8003cbc <HAL_TIM_Base_Start+0x48>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca6:	d009      	beq.n	8003cbc <HAL_TIM_Base_Start+0x48>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a14      	ldr	r2, [pc, #80]	; (8003d00 <HAL_TIM_Base_Start+0x8c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d004      	beq.n	8003cbc <HAL_TIM_Base_Start+0x48>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a13      	ldr	r2, [pc, #76]	; (8003d04 <HAL_TIM_Base_Start+0x90>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d111      	bne.n	8003ce0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b06      	cmp	r3, #6
 8003ccc:	d010      	beq.n	8003cf0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 0201 	orr.w	r2, r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cde:	e007      	b.n	8003cf0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0201 	orr.w	r2, r2, #1
 8003cee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr
 8003cfc:	40012c00 	.word	0x40012c00
 8003d00:	40000400 	.word	0x40000400
 8003d04:	40000800 	.word	0x40000800

08003d08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_TIM_ConfigClockSource+0x1c>
 8003d20:	2302      	movs	r3, #2
 8003d22:	e0b4      	b.n	8003e8e <HAL_TIM_ConfigClockSource+0x186>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d5c:	d03e      	beq.n	8003ddc <HAL_TIM_ConfigClockSource+0xd4>
 8003d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d62:	f200 8087 	bhi.w	8003e74 <HAL_TIM_ConfigClockSource+0x16c>
 8003d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6a:	f000 8086 	beq.w	8003e7a <HAL_TIM_ConfigClockSource+0x172>
 8003d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d72:	d87f      	bhi.n	8003e74 <HAL_TIM_ConfigClockSource+0x16c>
 8003d74:	2b70      	cmp	r3, #112	; 0x70
 8003d76:	d01a      	beq.n	8003dae <HAL_TIM_ConfigClockSource+0xa6>
 8003d78:	2b70      	cmp	r3, #112	; 0x70
 8003d7a:	d87b      	bhi.n	8003e74 <HAL_TIM_ConfigClockSource+0x16c>
 8003d7c:	2b60      	cmp	r3, #96	; 0x60
 8003d7e:	d050      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0x11a>
 8003d80:	2b60      	cmp	r3, #96	; 0x60
 8003d82:	d877      	bhi.n	8003e74 <HAL_TIM_ConfigClockSource+0x16c>
 8003d84:	2b50      	cmp	r3, #80	; 0x50
 8003d86:	d03c      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0xfa>
 8003d88:	2b50      	cmp	r3, #80	; 0x50
 8003d8a:	d873      	bhi.n	8003e74 <HAL_TIM_ConfigClockSource+0x16c>
 8003d8c:	2b40      	cmp	r3, #64	; 0x40
 8003d8e:	d058      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0x13a>
 8003d90:	2b40      	cmp	r3, #64	; 0x40
 8003d92:	d86f      	bhi.n	8003e74 <HAL_TIM_ConfigClockSource+0x16c>
 8003d94:	2b30      	cmp	r3, #48	; 0x30
 8003d96:	d064      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0x15a>
 8003d98:	2b30      	cmp	r3, #48	; 0x30
 8003d9a:	d86b      	bhi.n	8003e74 <HAL_TIM_ConfigClockSource+0x16c>
 8003d9c:	2b20      	cmp	r3, #32
 8003d9e:	d060      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0x15a>
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	d867      	bhi.n	8003e74 <HAL_TIM_ConfigClockSource+0x16c>
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d05c      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0x15a>
 8003da8:	2b10      	cmp	r3, #16
 8003daa:	d05a      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0x15a>
 8003dac:	e062      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dbe:	f000 f944 	bl	800404a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	609a      	str	r2, [r3, #8]
      break;
 8003dda:	e04f      	b.n	8003e7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dec:	f000 f92d 	bl	800404a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dfe:	609a      	str	r2, [r3, #8]
      break;
 8003e00:	e03c      	b.n	8003e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e0e:	461a      	mov	r2, r3
 8003e10:	f000 f8a4 	bl	8003f5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2150      	movs	r1, #80	; 0x50
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 f8fb 	bl	8004016 <TIM_ITRx_SetConfig>
      break;
 8003e20:	e02c      	b.n	8003e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f000 f8c2 	bl	8003fb8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2160      	movs	r1, #96	; 0x60
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 f8eb 	bl	8004016 <TIM_ITRx_SetConfig>
      break;
 8003e40:	e01c      	b.n	8003e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f000 f884 	bl	8003f5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2140      	movs	r1, #64	; 0x40
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 f8db 	bl	8004016 <TIM_ITRx_SetConfig>
      break;
 8003e60:	e00c      	b.n	8003e7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	f000 f8d2 	bl	8004016 <TIM_ITRx_SetConfig>
      break;
 8003e72:	e003      	b.n	8003e7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	73fb      	strb	r3, [r7, #15]
      break;
 8003e78:	e000      	b.n	8003e7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
	...

08003e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a29      	ldr	r2, [pc, #164]	; (8003f50 <TIM_Base_SetConfig+0xb8>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00b      	beq.n	8003ec8 <TIM_Base_SetConfig+0x30>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb6:	d007      	beq.n	8003ec8 <TIM_Base_SetConfig+0x30>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a26      	ldr	r2, [pc, #152]	; (8003f54 <TIM_Base_SetConfig+0xbc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d003      	beq.n	8003ec8 <TIM_Base_SetConfig+0x30>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a25      	ldr	r2, [pc, #148]	; (8003f58 <TIM_Base_SetConfig+0xc0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d108      	bne.n	8003eda <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a1c      	ldr	r2, [pc, #112]	; (8003f50 <TIM_Base_SetConfig+0xb8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00b      	beq.n	8003efa <TIM_Base_SetConfig+0x62>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee8:	d007      	beq.n	8003efa <TIM_Base_SetConfig+0x62>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a19      	ldr	r2, [pc, #100]	; (8003f54 <TIM_Base_SetConfig+0xbc>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d003      	beq.n	8003efa <TIM_Base_SetConfig+0x62>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a18      	ldr	r2, [pc, #96]	; (8003f58 <TIM_Base_SetConfig+0xc0>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d108      	bne.n	8003f0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a07      	ldr	r2, [pc, #28]	; (8003f50 <TIM_Base_SetConfig+0xb8>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d103      	bne.n	8003f40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	615a      	str	r2, [r3, #20]
}
 8003f46:	bf00      	nop
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr
 8003f50:	40012c00 	.word	0x40012c00
 8003f54:	40000400 	.word	0x40000400
 8003f58:	40000800 	.word	0x40000800

08003f5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	f023 0201 	bic.w	r2, r3, #1
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f023 030a 	bic.w	r3, r3, #10
 8003f98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	621a      	str	r2, [r3, #32]
}
 8003fae:	bf00      	nop
 8003fb0:	371c      	adds	r7, #28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr

08003fb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	f023 0210 	bic.w	r2, r3, #16
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	031b      	lsls	r3, r3, #12
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ff4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	621a      	str	r2, [r3, #32]
}
 800400c:	bf00      	nop
 800400e:	371c      	adds	r7, #28
 8004010:	46bd      	mov	sp, r7
 8004012:	bc80      	pop	{r7}
 8004014:	4770      	bx	lr

08004016 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004016:	b480      	push	{r7}
 8004018:	b085      	sub	sp, #20
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	f043 0307 	orr.w	r3, r3, #7
 8004038:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	609a      	str	r2, [r3, #8]
}
 8004040:	bf00      	nop
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr

0800404a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800404a:	b480      	push	{r7}
 800404c:	b087      	sub	sp, #28
 800404e:	af00      	add	r7, sp, #0
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	60b9      	str	r1, [r7, #8]
 8004054:	607a      	str	r2, [r7, #4]
 8004056:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004064:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	021a      	lsls	r2, r3, #8
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	431a      	orrs	r2, r3
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	4313      	orrs	r3, r2
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	4313      	orrs	r3, r2
 8004076:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	609a      	str	r2, [r3, #8]
}
 800407e:	bf00      	nop
 8004080:	371c      	adds	r7, #28
 8004082:	46bd      	mov	sp, r7
 8004084:	bc80      	pop	{r7}
 8004086:	4770      	bx	lr

08004088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800409c:	2302      	movs	r3, #2
 800409e:	e046      	b.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a16      	ldr	r2, [pc, #88]	; (8004138 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d00e      	beq.n	8004102 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ec:	d009      	beq.n	8004102 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a12      	ldr	r2, [pc, #72]	; (800413c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d004      	beq.n	8004102 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a10      	ldr	r2, [pc, #64]	; (8004140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d10c      	bne.n	800411c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004108:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	4313      	orrs	r3, r2
 8004112:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	bc80      	pop	{r7}
 8004136:	4770      	bx	lr
 8004138:	40012c00 	.word	0x40012c00
 800413c:	40000400 	.word	0x40000400
 8004140:	40000800 	.word	0x40000800

08004144 <memset>:
 8004144:	4603      	mov	r3, r0
 8004146:	4402      	add	r2, r0
 8004148:	4293      	cmp	r3, r2
 800414a:	d100      	bne.n	800414e <memset+0xa>
 800414c:	4770      	bx	lr
 800414e:	f803 1b01 	strb.w	r1, [r3], #1
 8004152:	e7f9      	b.n	8004148 <memset+0x4>

08004154 <__libc_init_array>:
 8004154:	b570      	push	{r4, r5, r6, lr}
 8004156:	2600      	movs	r6, #0
 8004158:	4d0c      	ldr	r5, [pc, #48]	; (800418c <__libc_init_array+0x38>)
 800415a:	4c0d      	ldr	r4, [pc, #52]	; (8004190 <__libc_init_array+0x3c>)
 800415c:	1b64      	subs	r4, r4, r5
 800415e:	10a4      	asrs	r4, r4, #2
 8004160:	42a6      	cmp	r6, r4
 8004162:	d109      	bne.n	8004178 <__libc_init_array+0x24>
 8004164:	f000 f828 	bl	80041b8 <_init>
 8004168:	2600      	movs	r6, #0
 800416a:	4d0a      	ldr	r5, [pc, #40]	; (8004194 <__libc_init_array+0x40>)
 800416c:	4c0a      	ldr	r4, [pc, #40]	; (8004198 <__libc_init_array+0x44>)
 800416e:	1b64      	subs	r4, r4, r5
 8004170:	10a4      	asrs	r4, r4, #2
 8004172:	42a6      	cmp	r6, r4
 8004174:	d105      	bne.n	8004182 <__libc_init_array+0x2e>
 8004176:	bd70      	pop	{r4, r5, r6, pc}
 8004178:	f855 3b04 	ldr.w	r3, [r5], #4
 800417c:	4798      	blx	r3
 800417e:	3601      	adds	r6, #1
 8004180:	e7ee      	b.n	8004160 <__libc_init_array+0xc>
 8004182:	f855 3b04 	ldr.w	r3, [r5], #4
 8004186:	4798      	blx	r3
 8004188:	3601      	adds	r6, #1
 800418a:	e7f2      	b.n	8004172 <__libc_init_array+0x1e>
 800418c:	08004238 	.word	0x08004238
 8004190:	08004238 	.word	0x08004238
 8004194:	08004238 	.word	0x08004238
 8004198:	0800423c 	.word	0x0800423c

0800419c <memcpy>:
 800419c:	440a      	add	r2, r1
 800419e:	4291      	cmp	r1, r2
 80041a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80041a4:	d100      	bne.n	80041a8 <memcpy+0xc>
 80041a6:	4770      	bx	lr
 80041a8:	b510      	push	{r4, lr}
 80041aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041ae:	4291      	cmp	r1, r2
 80041b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041b4:	d1f9      	bne.n	80041aa <memcpy+0xe>
 80041b6:	bd10      	pop	{r4, pc}

080041b8 <_init>:
 80041b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ba:	bf00      	nop
 80041bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041be:	bc08      	pop	{r3}
 80041c0:	469e      	mov	lr, r3
 80041c2:	4770      	bx	lr

080041c4 <_fini>:
 80041c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c6:	bf00      	nop
 80041c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ca:	bc08      	pop	{r3}
 80041cc:	469e      	mov	lr, r3
 80041ce:	4770      	bx	lr
